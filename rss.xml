<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Primary Unit</title><link>https://www.robjwells.com</link><description>A blog by Rob Wells, mostly about computer stuff.</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>This work is licensed under a Creative Commons Attribution 4.0 International License.</copyright><lastBuildDate>Fri, 23 Dec 2022 20:00:00 +0000</lastBuildDate><atom:link href="https://www.robjwells.com/rss.xml" rel="self" type="application/rss+xml"/><item><title>Sunrise and Sunset Database</title><link>https://www.robjwells.com/2022/12/sunrise-and-sunset-database/</link><pubDate>Fri, 23 Dec 2022 20:00:00 +0000</pubDate><guid>https://www.robjwells.com/2022/12/sunrise-and-sunset-database/</guid><description>&lt;p>A while ago, I was having trouble with the automatic light-dark theme switching on my laptop, as macOS tries to wait until an opportune moment when the computer is idle to make the change. That&amp;rsquo;s fair enough, as it does involve a moment when the system is not responsive. I was finding that if I kept working it would often be quite a while after sunset that the switch occurred.&lt;/p>
&lt;p>&lt;a href="https://wiki.keyboardmaestro.com/action/Set_System_to_Dark_Mode">Keyboard Maestro can set the system light-dark theme&lt;/a>, so I thought I&amp;rsquo;d rig it up to periodically check whether sunrise or sunset had occurred, and then force the change rather than being polite. There&amp;rsquo;s a trade off but overall I prefer the automatic switching to take place closer to the sunrise or sunset time rather than the system waiting in an attempt not to inconvenience me briefly.&lt;/p>
&lt;p>It relies on a local SQLite database of sunrise and sunset times for my home, but when I first rigged it up, I &amp;ldquo;only&amp;rdquo; put in the times for 2021 and 2022. It&amp;rsquo;s now time to fill the database for the coming years, so what better time to have a peek at how it works?&lt;/p>
&lt;p>&lt;a href="https://github.com/robjwells/sunrise-sunset">You can find the git repository here&lt;/a>.&lt;/p>
&lt;p>First off, we need a data source. I didn&amp;rsquo;t include a scraper in repo originally, partly out of politeness, but partly also because I hoped to change the data source.&lt;/p>
&lt;p>In the UK, &lt;a href="http://astro.ukho.gov.uk/">HM Nautical Almanac Office&lt;/a> (NAO) publishes various rise, set and twilight times (for other celestial objects as well as the sun). After a few &lt;a href="http://astro.ukho.gov.uk/nao/miscellanea/birs2.html">false&lt;/a> &lt;a href="http://astro.ukho.gov.uk/nao/miscellanea/UK_SRSS/uk_dec.html">starts&lt;/a> trying to find a big list of daily rise and set times for a long period at a time, you&amp;rsquo;ll come across the &lt;a href="http://astro.ukho.gov.uk/surfbin/runsurf_beta.cgi">WebSurf 2.0&lt;/a> application, which reassuringly has &lt;code>.cgi&lt;/code> in the URL (and, naturally, you would hope is entirely written in Perl).&lt;/p>
&lt;p>But after clicking your way through, you’ll end up with a big plain-text listing with no markup (here, snipped horizontally and vertically):&lt;/p>
&lt;pre tabindex="0">&lt;code> 2023 Sunrise and Sunset times
January February
Rise Set Rise Set
h m h m h m h m
1 08 06 16 02 07 39 16 50
2 08 06 16 03 07 38 16 51
3 08 06 16 04 07 36 16 53
4 08 06 16 05 07 35 16 55
5 08 06 16 07 07 33 16 57
&lt;/code>&lt;/pre>&lt;p>Now while this is not impossible to deal with, and I of course hear &lt;a href="https://www.youtube.com/watch?v=sERiPuOQyvo">Jerusalem&lt;/a> when thinking about the public servants who went through the trouble of making this data available, at the end of the day I am, in the words of the Tories, a shirker rather than a striver. So let&amp;rsquo;s find an easier way! (Also one that works for people outside Britain.)&lt;/p>
&lt;p>Thankfully, &lt;del>&lt;a href="https://www.whattimeisitrightnow.com/">whattimeisitrightnow.com&lt;/a>&lt;/del> &lt;a href="https://www.timeanddate.com/sun/uk/london">timeanddate.com&lt;/a> has us covered. Search for your preferred location and go to the &amp;ldquo;Sun and Moon&amp;rdquo; ▸ &amp;ldquo;Sunrise &amp;amp; Sunset&amp;rdquo; view. You&amp;rsquo;ll end up with something like &lt;code>timeanddate.com/sun/uk/london&lt;/code>.&lt;/p>
&lt;p>That will show you the rise and set times for the current month, but if you play with the dropdown above the table, you may notice that picking a different month or year is as simple as adding parameters to the URL, like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;https://www.timeanddate.com/sun/uk/london?month=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">month&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;amp;year=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">year&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thankfully, too, this data is in the HTML that gets served up, with no JavaScript-dependent front-end framework or scraper-blocker in the way. That leads us naturally onto this simple shell script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">seq &lt;span class="m">2023&lt;/span> &lt;span class="m">2030&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> year&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> seq &lt;span class="m">1&lt;/span> &lt;span class="m">12&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> month&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> curl --silent &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="s2">&amp;#34;https://www.timeanddate.com/sun/uk/london?month=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">month&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;amp;year=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">year&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &amp;gt; &lt;span class="s2">&amp;#34;sunrise-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">year&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">-&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">month&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.html&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This just dumps each month from 2023 through 2030 into an individual HTML file in the current directory. From there we turn to &lt;a href="https://github.com/robjwells/sunrise-sunset/blob/main/process_html_tables.py">&lt;code>process_html_tables.py&lt;/code>&lt;/a>. This is pretty straightforward and broken up into nice small parts, so you can read that at your leisure. It leans on Pandas to parse the HTML tables from the downloaded files and Pendulum to correctly handle dates with timezones, but there&amp;rsquo;s not much too it. Do check that you&amp;rsquo;re using the right timezone, though.&lt;/p>
&lt;p>Running that Python file will process all the scraped HTML files in the folder, and print an array of JSON objects, each containing a date, sunrise datetime and sunset datetime. This is an intermediate step that isn&amp;rsquo;t strictly necessary, but you might want that data available in a plain-text file.&lt;/p>
&lt;p>But it also means it&amp;rsquo;s trivial to create a SQLite database file with &lt;a href="https://sqlite-utils.datasette.io/en/stable/">&lt;code>sqlite-utils&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">python3 process_html_tables.py &lt;span class="p">|&lt;/span> sqlite-utils insert sunrise-sunset.db london -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That will create the &amp;ldquo;london&amp;rdquo; (in this case) table for you, but there&amp;rsquo;s also an SQL file to create both the table for the sunrise and sunset times and also one to log successful checks (&lt;code>create-tables.sql&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">london&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sunrise&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sunset&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">successful_checks&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">references&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">london&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">kind&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kind&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">check&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">kind&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sunrise&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;sunset&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This second table exists so that you can have, say, Keyboard Maestro automatically switch between light and dark modes, but also not have it override any manual change you make after that within the check period (for instance, if it&amp;rsquo;s a cloudy day and you want to keep dark mode on, so you manually re-enable it).&lt;/p>
&lt;p>Here&amp;rsquo;s &lt;code>check-sunrise.sql&lt;/code> (&lt;code>check-sunset.sql&lt;/code> is similar):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;now&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sunrise&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;sun has risen&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">london&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;now&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">exists&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">successful_checks&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">kind&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;sunrise&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;now&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that it only returns true (well, 1) if there hasn&amp;rsquo;t already been a successful (ie one causing a change) sunrise check today.&lt;/p>
&lt;p>A fair question is: &amp;ldquo;Why keep checking if you&amp;rsquo;ve already passed sunrise or sunset?&amp;rdquo; And the answer is: mostly so I don&amp;rsquo;t have to worry about the procedure for disabling and enabling the relevant Keyboard Maestro macros. Instead, I can have the macro run at a set interval between the earliest and latest sunrise/sunset times, and be confident it won&amp;rsquo;t change anything if it&amp;rsquo;s already run successfully. Here&amp;rsquo;s the sunrise macro itself:&lt;/p>
&lt;p>&lt;img src="keyboard-maestro-sunrise.png" alt="A screenshot of the sunrise macro in Keyboard Maestro">&lt;/p>
&lt;p>As a convenience, there&amp;rsquo;s an SQL script in the repo to find when these times are from the database file.&lt;/p>
&lt;p>One other convenience is a LaunchBar action that shows duration between the current time and today&amp;rsquo;s sunrise and sunset:&lt;/p>
&lt;video src="launchbar-sunrise-sunset.mp4" controls muted playsinline>
&lt;p>You&amp;rsquo;ll have to create the actual action yourself through LaunchBar&amp;rsquo;s Action Editor, but the file &lt;a href="https://github.com/robjwells/sunrise-sunset/blob/main/launchbar-sunrise-sunset.sh">&lt;code>launchbar-sunrise-sunset.sh&lt;/code>&lt;/a> can be pasted in to the default shell script in a new action, with of course the database file path and table names adjusted.&lt;/p></description></item><item><title>Typinator is on sale</title><link>https://www.robjwells.com/2022/12/typinator-is-on-sale/</link><pubDate>Fri, 09 Dec 2022 11:37:57 +0000</pubDate><guid>https://www.robjwells.com/2022/12/typinator-is-on-sale/</guid><description>&lt;p>Long time! Lots to talk about, some point soon.&lt;/p>
&lt;p>In the mean time, &lt;a href="https://www.ergonis.com/typinator">Typinator&lt;/a> is currently on sale (along with all ergonis
software), at 30% off, to celebrate the snazzy new ergonis website.&lt;/p>
&lt;p>I&amp;rsquo;ve much more to say about Typinator, but in short: I was a TextExpander user
for a long time, but grew hesitant to use it because it was slow and awkward.&lt;/p>
&lt;p>Typinator is not! It&amp;rsquo;s fast and flexible. I switched in March 2021 and I use it
a lot more than I did TextExpander, and creating new snippets is
straightforward and pleasant. The snippet search is also really fast and
responsive.&lt;/p>
&lt;p>The snippet language differs from TextExpander&amp;rsquo;s, but it&amp;rsquo;s easy to get used to.&lt;/p>
&lt;p>&lt;a href="https://www.ergonis.com/typinator">Do give it a try!&lt;/a>&lt;/p></description></item><item><title>Populating the books list with AWK</title><link>https://www.robjwells.com/2022/01/populating-the-books-list-with-awk/</link><pubDate>Thu, 20 Jan 2022 20:40:28 +0000</pubDate><guid>https://www.robjwells.com/2022/01/populating-the-books-list-with-awk/</guid><description>&lt;p>I read &lt;a href="https://www.robjwells.com/books/">48 books&lt;/a> last year, which is a lot for me. At least part of
that, I think, was to keep my mind in gear in a fairly healthy way, when I
didn’t feel like engaging with the world (poor mental health — thanks
once-in-a-century pandemic!)&lt;/p>
&lt;p>What I did &lt;em>not&lt;/em> do, though, is keep the &lt;a href="https://www.robjwells.com/books/">list of books&lt;/a> up to date,
not since spring 2020.&lt;/p>
&lt;p>Since I’ve been playing around with AWK a little, and had a big TSV file
containing the details for each of the books, I thought I&amp;rsquo;d pair the two to
fill out the missing files.&lt;/p>
&lt;p>I use &lt;a href="https://gohugo.io">Hugo&lt;/a> to generate this site, and each book is represented by a
markdown file containing a metadata block with (at least) the title, author’s
name, and the date on which I finished reading it. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">title: &amp;#34;Empire of Pain&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">author: &amp;#34;Patrick Radden Keefe&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">finish-date: 2022-01-01
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ge">_Short review to come!_&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>AWK is great for processing lines of text, but it’s missing some of the library
functions you’d like for working with the filesystem. The book files are stored
in this directory structure, where the markdown files are under each year
folder:&lt;/p>
&lt;pre tabindex="0">&lt;code>content/books
├── 2019
├── 2020
├── 2021
└── 2022
&lt;/code>&lt;/pre>&lt;p>Those year folders might not exist (&lt;em>did not&lt;/em> for 2021 and 2022). I could have
just created them by hand, but then we’d miss out on some yak-shaving.&lt;/p>
&lt;p>The path to the markdown file is constructed using the book&amp;rsquo;s title (for the
markdown filename itself) and finish date (for the year directory). We can wrap
the &lt;code>dirname&lt;/code> Unix utility:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-awk" data-lang="awk">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">dirname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">cmd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;dirname &amp;#34;&lt;/span> &lt;span class="nx">path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="nx">cmd&lt;/span> &lt;span class="o">|&amp;amp;&lt;/span> &lt;span class="kr">getline&lt;/span> &lt;span class="nx">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="kr">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cmd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The funny &lt;code>|&amp;amp;&lt;/code> operator on line 3 executes the command in &lt;code>cmd&lt;/code> and then
&lt;code>getline&lt;/code> stores the first line of the output (there&amp;rsquo;s just one for &lt;code>dirname&lt;/code>) in
&lt;code>result&lt;/code>. We call &lt;code>close&lt;/code> on the command string to release the associated file
descriptor.&lt;/p>
&lt;p>Let’s wrap our wrapper in a function that just makes sure the directory exists,
using &lt;code>mkdir -p&lt;/code>, to make our lives easier:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-awk" data-lang="awk">&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">ensure_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="kr">system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;mkdir -p &amp;#34;&lt;/span> &lt;span class="nx">dirname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can think about the filename itself. It doesn&amp;rsquo;t have to be anything
particular, but I like to keep mine &lt;code>really-simple-like-this.md&lt;/code>. We’re using
the title of the books as the filenames, so the key is just to strip out
non-word characters:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-awk" data-lang="awk">&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">safe_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">remove_non_word_characters&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">remove_apostrophes&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kr">tolower&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">string&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">remove_apostrophes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kr">gensub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/[&amp;#39;’]/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;g&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">remove_non_word_characters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kr">gensub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sr">/\W+/&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;-&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;g&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>remove_apostrophes&lt;/code> function is not strictly necessary but ensures titles
such as &lt;em>Hitler’s Army&lt;/em> don’t become &lt;code>hitler-s-army&lt;/code> when they go through
&lt;code>remove_non_word_characters&lt;/code>.&lt;/p>
&lt;p>With that setup done, we can move on to the meat of the file, the lone
pattern-action statement:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-awk" data-lang="awk">&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl">&lt;span class="sr">/^(2020-(0[6-9]|1[0-2])|202[12])/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl"> &lt;span class="nx">path_template&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;content/books/%s/%s.md&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">26&lt;/span>&lt;span class="cl"> &lt;span class="nx">year&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">27&lt;/span>&lt;span class="cl"> &lt;span class="nx">title_for_path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">safe_name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">28&lt;/span>&lt;span class="cl"> &lt;span class="nx">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path_template&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">year&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">title_for_path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">29&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">30&lt;/span>&lt;span class="cl"> &lt;span class="nx">content_template&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="err">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">31&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;---\n&amp;#34;&lt;/span> &lt;span class="err">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">32&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;title: \&amp;#34;%s\&amp;#34;\n&amp;#34;&lt;/span> &lt;span class="err">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">33&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;author: \&amp;#34;%s\&amp;#34;\n&amp;#34;&lt;/span> &lt;span class="err">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">34&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;finish-date: %s\n&amp;#34;&lt;/span> &lt;span class="err">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">35&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;---\n&amp;#34;&lt;/span> &lt;span class="err">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">36&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;\n&amp;#34;&lt;/span> &lt;span class="err">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">37&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;_Short review to come!_&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">38&lt;/span>&lt;span class="cl"> &lt;span class="nx">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">sprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">content_template&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">39&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">40&lt;/span>&lt;span class="cl"> &lt;span class="nx">ensure_dir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">41&lt;/span>&lt;span class="cl"> &lt;span class="kr">print&lt;/span> &lt;span class="nx">content&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">42&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We match lines that start with dates representing June 2020 (the last update
being in May 2020) through 2022. Next, we pull out the year from the date
(field 1), and munge the book title (field 2), before formatting them into the
path template with the built-in &lt;code>sprintf&lt;/code> function.&lt;/p>
&lt;p>The &lt;code>content_template&lt;/code> is just the markdown you saw earlier in the post, again
formatted using &lt;code>sprintf&lt;/code> and this time involving the author name (field 3).&lt;/p>
&lt;p>We ensure the directory exists for the target markdown file, and just print the
formatted template via redirection into the file.&lt;/p>
&lt;p>So, would I use AWK over Python for things like this in the future? Maybe. The
disadvantage with AWK is that it’s missing built-in tools for working with
the system, and the work done above would be easier with, say, &lt;a href="https://docs.python.org/3.10/library/pathlib.html#module-pathlib">Python’s
pathlib module&lt;/a>. Or, then again, I could have just done &lt;code>mkdir 2021 2022&lt;/code> — but I wanted to get a feel for calling tools from AWK.&lt;/p>
&lt;p>I think this tool is perhaps just on the edge where it could go either way.
Python has more tools available, but AWK is so focussed on text processing that
it does some of that boring work you’d have to do manually in Python.&lt;/p>
&lt;p>It was fun, and I look forward to using AWK for more in the future. (I’ve
bought &lt;a href="https://archive.org/details/pdfy-MgN0H1joIoDVoIC7">the book&lt;/a> second-hand.)&lt;/p></description></item><item><title>Ejecting all disks</title><link>https://www.robjwells.com/2022/01/ejecting-all-disks/</link><pubDate>Sun, 09 Jan 2022 20:48:27 +0000</pubDate><guid>https://www.robjwells.com/2022/01/ejecting-all-disks/</guid><description>&lt;p>David Sparks posted this week about &lt;a href="https://www.macsparky.com/blog/2022/01/using-keyboard-maestro-and-applescript-to-eject-external-drives/">ejecting disks using AppleScript
and Keyboard Maestro&lt;/a>. I’m grateful to David for posting
about this — it’s something I’ve needed for a while but hadn’t got
around to doing. Currently I plug my laptop into several external drives
when I’m sat at my desk, and have to eject them before taking it
somewhere more relaxed.&lt;/p>
&lt;p>But David’s script didn’t quite work for me in that a blunt &lt;code>eject the disks&lt;/code> command to the Finder will attempt to eject all the disks that
are considered “ejectable”. For me, this includes APFS snapshots that
aren’t obviously visible in the user interface, where trying to eject
them pops up a dialog referencing &amp;ldquo;Macintosh HD – Data@snap…&amp;rdquo;.&lt;/p>
&lt;p>My alternative is to filter out any drives that contain &amp;ldquo;Macintosh HD&amp;rdquo;
in their displayed name:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-applescript" data-lang="applescript">&lt;span class="line">&lt;span class="cl">&lt;span class="k">tell&lt;/span> &lt;span class="nb">application&lt;/span> &lt;span class="s2">&amp;#34;Finder&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">eject&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">every&lt;/span> &lt;span class="nv">disk&lt;/span> &lt;span class="nb">where&lt;/span> &lt;span class="s2">&amp;#34;Macintosh HD&amp;#34;&lt;/span> &lt;span class="ow">is not&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="k">its&lt;/span> &lt;span class="nv">displayed&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span> &lt;span class="k">tell&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that it’s important to use the &lt;em>displayed name&lt;/em> property as the
APFS snapshots have UUIDs as their name property.&lt;/p>
&lt;p>I’ve also stripped out David’s error handling, as I find that if there’s
an error ejecting the disk it’s usually communicated by the Finder
itself rather than via an error code visible to AppleScript.&lt;/p>
&lt;p>This doesn’t tackle the problem of the Finder refusing to eject a drive
containing opened files, even if those files are opened by (from the
user’s perspective) unimportant background commands. I spent a chunk of
the morning mulling this over (and looking at &lt;code>lsof&lt;/code>’s inscrutable man
page!), and think I might try to run the output of &lt;code>lsof -F&lt;/code> through AWK
to enable a prompt-to-terminate interface. This is particularly
important for me as I keep my music and photo libraries on an external
drive; the photo library in particular is often opened by background
system tasks, I think as iCloud syncs across new photos from my phone.&lt;/p></description></item><item><title>How to wrap bc to do calculations</title><link>https://www.robjwells.com/2021/02/how-to-wrap-bc-to-do-calculations/</link><pubDate>Tue, 23 Feb 2021 18:14:00 +0000</pubDate><guid>https://www.robjwells.com/2021/02/how-to-wrap-bc-to-do-calculations/</guid><description>&lt;aside class="flag">
&lt;p>This was &lt;a href="https://github.com/robjwells/til/blob/main/shell/202102230701%20How%20to%20wrap%20bc%20to%20do%20calculations.md">original published as a TIL&lt;/a> but I thought it was interesting enough to post on its own.&lt;/p>
&lt;p>Funnily enough, the planets seem to have aligned and &lt;a href="https://leancrew.com/all-this/2021/02/some-bc-stuff/">Dr Drang has also written about &lt;code>bc&lt;/code> today&lt;/a>.&lt;/p>
&lt;/aside>
&lt;hr>
&lt;p>I find &lt;a href="https://www.gnu.org/software/bc/">&lt;code>bc&lt;/code>&lt;/a> trips me up when I try to calculations at the shell, so I wrapped it.&lt;/p>
&lt;p>There are two hazards for me:&lt;/p>
&lt;ol>
&lt;li>Failure to handle expressions without a final newline.&lt;/li>
&lt;li>Integer division.&lt;/li>
&lt;/ol>
&lt;h3 id="final-newline-missing">Final newline missing&lt;/h3>
&lt;p>No 1 often occurs when I produce a list of numbers in &lt;a href="https://www.barebones.com/products/bbedit/">BBEdit&lt;/a>, usually extracted and transformed via regexes.&lt;/p>
&lt;p>For example, we get a PDF receipt from Sainbury’s for our online shopping, and to work out my share I like to edit the text from &lt;a href="https://linux.die.net/man/1/pdftotext">&lt;code>pdftotext&lt;/code>&lt;/a> in BBEdit, then run the line totals through a pipeline to calculate the total.&lt;/p>
&lt;p>That used to look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ pbpaste &lt;span class="p">|&lt;/span> paste -s -d &lt;span class="s1">&amp;#39;+&amp;#39;&lt;/span> - &lt;span class="p">|&lt;/span> bc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">609&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pbpaste&lt;/code> pastes the macOS system clipboard, &lt;a href="https://linux.die.net/man/1/paste">&lt;code>paste&lt;/code>&lt;/a> joins those lines with &lt;code>+&lt;/code>, and &lt;code>bc&lt;/code> (should!) print the total.&lt;/p>
&lt;p>Except this happens if you’re missing a final newline:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ pbpaste &lt;span class="p">|&lt;/span> paste -s -d &lt;span class="s1">&amp;#39;+&amp;#39;&lt;/span> - &lt;span class="p">|&lt;/span> bc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>standard_in&lt;span class="o">)&lt;/span> 1: parse error
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="integer-division">Integer division&lt;/h2>
&lt;p>And secondly, with the default settings, &lt;code>bc&lt;/code> does integer division:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ bc &lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span> 9/2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which can be fixed by setting &lt;code>scale&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ bc &lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span> &lt;span class="s1">&amp;#39;scale=2; 9/2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4.50
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(&lt;code>&amp;lt;&amp;lt;&amp;lt;&lt;/code> starts a “here-string”, which you can learn more about at &lt;code>man -P &amp;quot;less -p '&amp;lt;&amp;lt;&amp;lt;'&amp;quot; zshmisc&lt;/code>, which will take you directly to the right part of the &lt;code>zshmisc&lt;/code> man page. Search the &lt;code>bash&lt;/code> man page if you’re using &lt;code>bash&lt;/code>, but it’s significantly more terse than the &lt;code>zsh&lt;/code> explanation.)&lt;/p>
&lt;h3 id="wrapping-bc">Wrapping &lt;code>bc&lt;/code>&lt;/h3>
&lt;p>So I wrote a simple wrapper script, &lt;code>calc&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/usr/local/bin/zsh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nb">set&lt;/span> -euo pipefail
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Read expression from $1 or stdin.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -ge &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">expression&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">read&lt;/span> expression &lt;span class="o">||&lt;/span> &lt;span class="nb">true&lt;/span> &lt;span class="c1"># Force successful exit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Default scale to 3 (.123) if $2 is not given.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bc &lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span> &lt;span class="s2">&amp;#34;scale=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="k">:-&lt;/span>&lt;span class="nv">3&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">; &lt;/span>&lt;span class="nv">$expression&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The conditional in the middle just handles being called in a pipe, with the expression coming on standard input, or having the expression provided as the first argument. The &lt;code>|| true&lt;/code> is necessary after &lt;code>read&lt;/code> as &lt;a href="https://stackoverflow.com/questions/40547032/bash-read-returns-with-exit-code-1-even-though-it-runs-as-expected">&lt;code>read&lt;/code> only exits with a success code if it encounters EOF&lt;/a>, and since I have &lt;code>-e&lt;/code> set in the file, that would cause the whole script to exit.&lt;/p>
&lt;p>I set the scale to 3 by default (showing 3 decimal places), but you can configure that with the second argument.&lt;/p>
&lt;p>Using a here-string for &lt;code>bc&lt;/code>’s input means that it should work whether or not there is a final newline.&lt;/p>
&lt;p>The use of &lt;code>read&lt;/code> also allows the use of &lt;code>calc&lt;/code> by itself to print the result of one expression, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ calc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">(&lt;/span>&lt;span class="m">2&lt;/span> + 2&lt;span class="o">)&lt;/span> / &lt;span class="o">(&lt;/span>&lt;span class="m">10&lt;/span> / 2&lt;span class="o">)&lt;/span>↩
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.800
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="wrapping-summation">Wrapping summation&lt;/h3>
&lt;p>I use the “sum this list of numbers” pipeline fairly often, and it’s easy to pull out into its own command. I’m just using an alias, which I’ve added to my &lt;code>.zshrc&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> ∑&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;paste -s -d &amp;#39;+&amp;#39; - | calc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://linux.die.net/man/1/sum">&lt;code>sum&lt;/code>&lt;/a> is already taken, so &lt;a href="https://en.wikipedia.org/wiki/Summation#Capital-sigma_notation">∑&lt;/a> seemed appropriate. On macOS you can type it with ⌥w.&lt;/p>
&lt;p>So my pipeline from before just becomes &lt;code>pbpaste | ∑&lt;/code>.&lt;/p></description></item><item><title>Give Python’s static typing a go</title><link>https://www.robjwells.com/2020/07/give-pythons-static-typing-a-go/</link><pubDate>Wed, 08 Jul 2020 06:00:00 +0100</pubDate><guid>https://www.robjwells.com/2020/07/give-pythons-static-typing-a-go/</guid><description>&lt;p>While my go-to language is still Python, at &lt;a href="https://www.dcs.bbk.ac.uk/">university&lt;/a> I’ve also used Java and C#.
I have to say, there was a huge amount to like — much to my surprise initially!&lt;/p>
&lt;p>Previously I’d kind of written off Java as being a &lt;a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition">boring language for boring businesspeople&lt;/a>.
There are certainly elements of that (&lt;code>package com.robjwells.MyPackage;&lt;/code> in &lt;code>src/main/java/com/robjwells/MyPackage.java&lt;/code>) but there’s a lot to like.
Streams are great, lambdas are great, the standard library is great (though not without its rough edges, such as the repeated attempts at date and time), and the tooling is great (I have actually come round to really like &lt;a href="https://www.jetbrains.com/idea/">IntelliJ IDEA&lt;/a> — certainly buying a full licence when my academic licence expires).
Plus, it’s really coming along at a clip now with the shorter release cycle.&lt;/p>
&lt;p>And C# was an even more pleasant surprise. It’s easy to get the impression that it’s “Microsoft’s Java”, but that’s really selling it short.
&lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/">LINQ&lt;/a> is a joy that makes &lt;a href="https://www.youtube.com/watch?v=ei71YpmfRX4">comprehensions in Python&lt;/a> (of which I am a huge fan!) seem… just a bit clunky. But C# is full of features, not just LINQ, that make working in it a real pleasure. (I will say, though, that at least on the Mac &lt;a href="https://www.jetbrains.com/rider/">Rider&lt;/a> is a far superior editor than Visual Studio.)&lt;/p>
&lt;p>All of this is to say, in a round-about way, that those &lt;em>weird verbose enterprise-y languages&lt;/em> have a lot going for them — even in the still small-scale things that I’m working on where without this exposure I would just use Python.&lt;/p>
&lt;p>Now, I still &lt;em>am&lt;/em> using Python, but there are things that I miss.
Chief among them in Python is having the type system actively help me out. &lt;a href="https://www.executeprogram.com/blog/porting-to-typescript-solved-our-api-woes">Gary Bernhardt writes a bit about this in the context of Ruby and TypeScript&lt;/a>. (Be warned there are trivial examples ahead.)&lt;/p>
&lt;p>Now, I’m using &lt;a href="https://code.visualstudio.com/">VSCode&lt;/a> so actually the editor will step in and help you even if you do nothing to aid it. For instance, in the following situation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># untyped.py v1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">ultimate_answer&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">42&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ultimate_answer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>VSCode (using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python extension&lt;/a>) will correctly infer that the type of &lt;code>u&lt;/code> is &lt;code>int&lt;/code>. So let’s do something with that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># untyped.py v2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">ultimate_answer&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">42&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">do_something&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_something&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ultimate_answer&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>VSCode still correctly infers &lt;code>u&lt;/code> to be an &lt;code>int&lt;/code>. Great! But let’s be clear: this is VSCode doing the work so that it can offer you handy things like code completion.&lt;/p>
&lt;p>What happens if we have a change in requirements and we change our API… only we don’t catch everything so we end up with the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># untyped.py v3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">ultimate_answer&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;42&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">do_something&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_something&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ultimate_answer&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>At this point, VSCode gives up: &lt;code>u&lt;/code> is an &lt;code>int&lt;/code> or it’s a &lt;code>str&lt;/code>. In fact it’s neither, because &lt;code>do_something()&lt;/code> raises a &lt;code>TypeError&lt;/code> so &lt;code>u&lt;/code> is never assigned. This is “obvious” to a human reading the code, in this simple example, but it’s easy to imagine a complex system where the types get out of line but the definitions are far apart from each other and the eventual call site.&lt;/p>
&lt;p>There are type checkers for Python, the main one being &lt;a href="http://www.mypy-lang.org/">mypy&lt;/a> (which is great!). Can mypy help us here?&lt;/p>
&lt;pre tabindex="0">&lt;code>$ mypy untyped.py
Success: no issues found in 1 source file
&lt;/code>&lt;/pre>&lt;p>Oh, success! Great.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ python3 untyped.py
Traceback (most recent call last):
File &amp;#34;untyped.py&amp;#34;, line 10, in &amp;lt;module&amp;gt;
main()
File &amp;#34;untyped.py&amp;#34;, line 8, in main
u = do_something(ultimate_answer())
File &amp;#34;untyped.py&amp;#34;, line 5, in do_something
return n - 11
TypeError: unsupported operand type(s) for -: &amp;#39;str&amp;#39; and &amp;#39;int&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Ah, no, no magic was performed and we still have a &lt;code>TypeError&lt;/code>. It’s worth pointing out here that mypy is all about gradual typing — adding type annotations to your programs as and when. If there are no annotations, there are no checks performed. It’s not clairvoyant.&lt;/p>
&lt;p>If we switch back to VSCode, what if we try &lt;a href="https://devblogs.microsoft.com/python/announcing-pylance-fast-feature-rich-language-support-for-python-in-visual-studio-code/">Microsoft’s shiny new Pylance extension&lt;/a>? In the basic type-checking mode it reports that the type of &lt;code>u&lt;/code> is unknown which … is a step in the right direction? But no warnings.&lt;/p>
&lt;p>If we ratchet up the type-checking mode to strict it reports, with a bunch of red error squiggles, that the return type of &lt;code>do_something()&lt;/code> is unknown and the type of &lt;code>u&lt;/code> is unknown. We get a similar result if we pass the &lt;code>--strict&lt;/code> flag to mypy, which essentially tells the type checker “forget about this gradual business” and attempts to check the whole file. This effectively fails, because we’ve done nothing to help it. Let’s do that now.&lt;/p>
&lt;p>In fact, very little is needed before Pylance starts to push you in the right direction, only this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># typed.py v1 excerpt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">do_something&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After which we’re rewarded with red squiggles underneath the call to &lt;code>ultimate_answer()&lt;/code> that provides the argument inline to &lt;code>do_something()&lt;/code>. The message we get is interesting because it reveals something about the knowledge of the type-checker:&lt;/p>
&lt;pre tabindex="0">&lt;code>Argument of type &amp;#34;Literal[&amp;#39;42&amp;#39;]&amp;#34; cannot be assigned to
parameter &amp;#34;n&amp;#34; of type &amp;#34;int&amp;#34; in function &amp;#34;do_something&amp;#34;
&amp;#34;Literal[&amp;#39;42&amp;#39;]&amp;#34; is incompatible with &amp;#34;int&amp;#34;
&lt;/code>&lt;/pre>&lt;p>We haven’t typed &lt;code>ultimate_answer()&lt;/code>, but it knows that &amp;ldquo;42&amp;rdquo; can’t be treated as an &lt;code>int&lt;/code>. Mypy needs a little more help to get there:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># typed.py v2 excerpt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">ultimate_answer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;42&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">do_something&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, at this point we’ve said that &lt;code>ultimate_answer()&lt;/code> returns a string and that &lt;code>do_something()&lt;/code> takes an integer. What does mypy think?&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt; $ mypy typed.py
Success: no issues found in 1 source file
&amp;gt; $ mypy --strict typed.py
[…snip…]
typed.py:8: error: Argument 1 to &amp;#34;do_something&amp;#34; has
incompatible type &amp;#34;str&amp;#34;; expected &amp;#34;int&amp;#34;
[…snip…]
&lt;/code>&lt;/pre>&lt;p>This is an interesting situation because &amp;ldquo;normal&amp;rdquo; mode mypy reports that this is fine, no problems here. Strict mode complains — among other things — that the types don’t match. Finally, this is what we want.&lt;/p>
&lt;p>But why doesn’t “normal” mode mypy not see the problem? I think this is to do with what is considered a “typed context”. By using &lt;code>--strict&lt;/code> we force everything to be a typed context, so we get a lot more warnings and errors from mypy. But without this, &lt;code>main()&lt;/code> is not a typed context — it has no typed arguments, and no explicit return type, so “normal” mode mypy just skips over it.&lt;/p>
&lt;p>The strength of gradual typing is that if you don’t want to or aren’t ready to add type information, you don’t. But even in this toy example, the standard Python type-checker under its default settings does not pick up this “obvious” (to us!) type error. In &lt;a href="https://www.youtube.com/watch?v=ST33zDM9vOE&amp;amp;feature=youtu.be">Dustin Ingram’s Pycon talk about static typing&lt;/a> he says you should use static typing everywhere — for a few reasons, but here we can see that failing to do so leaves a clear error undetected..&lt;/p>
&lt;p>It doesn’t take much to rectify that for mypy, just a return type on &lt;code>main()&lt;/code>, yielding the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># typed.py v3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">ultimate_answer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;42&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">do_something&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">do_something&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ultimate_answer&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And now &lt;code>mypy typed.py&lt;/code> gives the same error that strict mode did for the previous example. Adding the explicit return type to &lt;code>main()&lt;/code> is honestly pretty useless, but now it opens up the definition of &lt;code>main()&lt;/code> to be type checked, at which point the error is spotted.&lt;/p>
&lt;hr>
&lt;p>I wrote the title of this blog post before I really knew where I was going (I have a Beeminder deadline to hit!) so at this point it feels to me like I haven’t quite delivered on (why you should) “Give Python’s static typing a go”. Really we’re at “If you decide to use Python’s static typing you need to go all-in.” Which actually is something I do believe! I think the strictest settings are the most useful, but leaving something untyped leaves a hole for type errors to sneak through.&lt;/p>
&lt;p>But it is useful in itself. It’s unfamiliar and, honestly, a bit clunky in Python. (The dance for declaring a &lt;code>TypeVar&lt;/code> for a generic function taking some type &lt;code>T&lt;/code> is … Not Good and looks worse once you run your code through a formatter, with it then two lines away.)&lt;/p>
&lt;p>But thinking about types is thinking about design, and thinking about the contract that you’re willing to offer to the outside world. I’ve found that in Java and C# sometimes I’m ready to bound straight into defining a function … only to stop after realising that I haven’t really clarified what expectations I have of the outside world (parameter types) and what expectations the outside world has of me (return type).&lt;/p>
&lt;p>Here’s a dead-obvious example from a simple exercise on &lt;a href="https://exercism.io/">Exercism&lt;/a> (sorry for any spoilers but I should hope this one is straightforward to anyone with any knowledge of the &lt;code>datetime&lt;/code> module!):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">timedelta&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">GIGASECOND&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">timedelta&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">seconds&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1_000_000_000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">moment&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">datetime&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">moment&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">GIGASECOND&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, &lt;code>add()&lt;/code> is a bad name in general but fine in this confined case, but it’s the simple addition of the &lt;code>datetime&lt;/code> annotations that make it clear what we’re handling here. You give a datetime, receive a datetime. Nothing fancy, but compare with the following signature:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">moment&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It’s concise, sure, but is the cost in understanding worth it? Explicitly annotating the types forces you to consider what the interface is and, in return, tools like mypy will give you a hand in finding bugs.&lt;/p>
&lt;p>Anyway, give &lt;a href="https://www.youtube.com/watch?v=ST33zDM9vOE&amp;amp;feature=youtu.be">Dustin Ingram’s talk&lt;/a> a watch (check out those t-shirts!) as it’s informative, straightforward and short. Do check out the &lt;a href="https://mypy.readthedocs.io/en/stable/index.html">mypy documentation&lt;/a>, as there’s plenty of descriptive information in there beyond the interface to the command line tool and the &lt;code>typing&lt;/code> module. &lt;a href="https://www.youtube.com/watch?v=7ZbwZgrXnwY">Jukka Lehtosalo and David Fisher spoke in some detail at Pycon 2017 about mypy&lt;/a>, and I highly recommend &lt;a href="https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python">Jukka’s article on the Dropbox tech blog that looks at the history and practical aspects of mypy&lt;/a>.&lt;/p>
&lt;p>It’s clear also that this is the direction of travel for Python — there is a lot on the horizon that will make life easier (see &lt;a href="https://www.python.org/dev/peps/">the list of PEPs&lt;/a>), and I’m particularly looking forward to seeing what becomes of &lt;a href="https://www.python.org/dev/peps/pep-0622/">PEP 622&lt;/a> as at the moment it looks like it will bring with it &lt;a href="https://fsharpforfunandprofit.com/posts/discriminated-unions/">sum types&lt;/a>, even if it is a year or two off at this point.&lt;/p></description></item><item><title>Scheduling posts in Hugo</title><link>https://www.robjwells.com/2020/06/scheduling-posts-in-hugo/</link><pubDate>Sat, 06 Jun 2020 06:00:00 +0100</pubDate><guid>https://www.robjwells.com/2020/06/scheduling-posts-in-hugo/</guid><description>&lt;p>My enthusiasm for writing posts here tends to come in reasonably short bursts, usually over a weekend, so I’ve taken to scheduling the two or three posts I might write over the following weeks.&lt;/p>
&lt;p>It’s reasonably straightforward to schedule publication with &lt;a href="https://gohugo.io/">Hugo&lt;/a> by using the &lt;code>publishDate&lt;/code> attribute in your post frontmatter. For instance, this is the frontmatter for this post right now:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Scheduling posts in Hugo&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">date&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2020-05-24T09:25:44&lt;/span>&lt;span class="m">+01&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">publishDate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2020-06-06T06:00:00&lt;/span>&lt;span class="m">+01&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">00&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">draft&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>date&lt;/code> attribute is filled in by Hugo when I create the post bundle skeleton. I tend to leave this as a marker for when I started writing a post (though I have changed it for posts that I start, leave for a while, and &lt;a href="https://www.robjwells.com/2020/05/keyboard-maestro-macro-to-insert-images-into-blog-posts/">finish later&lt;/a>).&lt;/p>
&lt;p>The &lt;code>publishDate&lt;/code> attribute controls when the post is actually published. Hugo by default doesn’t build posts with this set in the future.&lt;/p>
&lt;p>One important change that I made from the defaults, though, is to define the handling of dates in my site-wide config file (&lt;code>config.toml&lt;/code>) like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">frontmatter&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">date&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;publishDate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;date&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;:default&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What this means is that Hugo will prefer the &lt;code>publishDate&lt;/code> as the date of the post, before falling back to the &lt;code>date&lt;/code> attribute, and then resuming its default lookup, which is listed &lt;a href="https://gohugo.io/getting-started/configuration/#configure-dates">in the Hugo documentation&lt;/a>.
(At the moment, the only other thing in the default lookup order is the file modification time, but mostly I include &amp;ldquo;:default&amp;rdquo; to be safe if this changes in the future.)&lt;/p>
&lt;p>Otherwise, you might end up with a situation where you write “Post Future”, set a publish date in the future, then write “Post Now” and publish immediately, and when “Post Future” is published it will be shown as being published earlier than “Post Now” because its &lt;code>date&lt;/code> is earlier. Changing the date lookup order in the config will preserve your deliberate schedule.&lt;/p>
&lt;p>(Thanks to “n m” on StackOverflow who got me started &lt;a href="https://stackoverflow.com/questions/59655470/hugo-date-vs-publishdate/59760977#59760977">with this answer&lt;/a>.)&lt;/p>
&lt;p>Obviously, just having a bunch of files with the dates set properly doesn’t mean your post will actually be published automatically at the right time.
I have a script on my server that cron runs every 15 minutes that pulls from &lt;a href="https://github.com/robjwells/primaryunit">the GitHub repository&lt;/a> and rebuilds the site.&lt;/p>
&lt;p>This set-up is made easy thanks to Hugo being a single binary, so it’s simple to install on the server, whereas &lt;a href="https://github.com/robjwells/majestic/">before&lt;/a> I would generally build the site locally and upload it to my server with rsync.&lt;/p>
&lt;p>Hugo can list posts that are scheduled in the future:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="line">&lt;span class="cl">$ hugo list future
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">content/posts/2020/05/24/scheduling-posts-in-hugo/index.md,2020-06-06T06:00:00+01:00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">content/posts/2020/05/24/keyboard-maestro-macro-to-insert-images-into-blog-posts/index.md,2020-05-30T06:00:00+01:00
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a bit noisy, so here’s a sed one-liner to improve things slightly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-zsh" data-lang="zsh">&lt;span class="line">&lt;span class="cl">$ hugo list future &lt;span class="p">|&lt;/span> sed -E &lt;span class="s1">&amp;#39;s/^.+\/([^\/]+)\/index.md,(.+)/\2 - \1/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-06-06T06:00:00+01:00 - scheduling-posts-in-hugo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020-05-30T06:00:00+01:00 - keyboard-maestro-macro-to-insert-images-into-blog-posts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(This assumes that you’re using &lt;a href="https://gohugo.io/content-management/page-bundles/">page bundles&lt;/a>.)&lt;/p>
&lt;hr>
&lt;p>I actually now have a &lt;a href="https://www.beeminder.com/robjwells/blog">Beeminder goal&lt;/a> to ensure that I write a post a month — well, I was being lenient with myself so it’s every 31 days. It’s also set for a maximum 31 safe days, so I feel that scheduling once a week is enough to tamp down any short-term blog-mania while also not gaming the Beeminder goal too much by scheduling posts at 31-day intervals. (Perhaps this is a sign though that I can set the goal to have a shorter period, but at the moment I have enough commitments that I don’t feel comfortable doing so.)&lt;/p></description></item><item><title>Keyboard Maestro macro to insert images into blog posts</title><link>https://www.robjwells.com/2020/05/keyboard-maestro-macro-to-insert-images-into-blog-posts/</link><pubDate>Sat, 30 May 2020 06:00:00 +0100</pubDate><guid>https://www.robjwells.com/2020/05/keyboard-maestro-macro-to-insert-images-into-blog-posts/</guid><description>&lt;p>Here’s a quick Keyboard Maestro macro to make it easier to insert images into blog posts, or any other markdown or HTML document really. The details of the macro are set up to create a &lt;a href="https://gohugo.io/content-management/shortcodes/#figure">Hugo figure shortcode&lt;/a>, but the Hugo-specific bits are just scaffolding and could be swapped out for whatever you need.&lt;/p>
&lt;p>You can &lt;a href="insert-hugo-figure.kmmacros">download the macro file here&lt;/a>, but the whole thing ended up being a bit long so I’m not going to include the usual image of the whole macro (which is 1,965 pixels tall). Let’s step through it.&lt;/p>
&lt;figure class="full-width no-border">&lt;a href="macro-1-prompt-and-read.png">&lt;img src="macro-1-prompt-and-read.png"
alt="A screenshot showing a portion of a Keyboard Maestro macro, prompting the user for a file and then reading it." width="551" height="275"/>&lt;/a>&lt;figcaption>
&lt;p>The first stage of the macro, prompting for the image file and then loading it onto a named clipboard.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>After selecting the image, we need to load it onto a named clipboard because Keyboard Maestro’s image actions generally work on the contents of a clipboard.&lt;/p>
&lt;figure class="full-width no-border">&lt;a href="macro-2-store-properties.png">&lt;img src="macro-2-store-properties.png"
alt="A screenshot showing a portion of a Keyboard Maestro macro, reading image properties into variables." width="551" height="312"/>&lt;/a>&lt;figcaption>
&lt;p>Next we extract needed properties from the image into Keyboard Maestro variables.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Then we need to prompt the user to confirm the attributes of the figure.&lt;/p>
&lt;figure class="full-width no-border">&lt;a href="macro-3-prompt-attributes.png">&lt;img src="macro-3-prompt-attributes.png"
alt="A screenshot showing a portion of a Keyboard Maestro macro, of a prompt to the user to confirm attributes for the figure to be inserted." width="551" height="377"/>&lt;/a>&lt;figcaption>
&lt;p>The prompt set-up.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;figure class="full-width no-border">&lt;a href="macro-prompt.png">&lt;img src="macro-prompt.png"
alt="A screenshot showing a Keyboard Maestro prompt asking for attributes to complete an HTML figure" width="537" height="267"/>&lt;/a>&lt;figcaption>
&lt;p>And the prompt itself.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Any of these can be empty, so after assembling the shortcode text blank attributes are removed:&lt;/p>
&lt;figure class="full-width no-border">&lt;a href="macro-4-assemble-figure.png">&lt;img src="macro-4-assemble-figure.png"
alt="A screenshot showing a portion of a Keyboard Maestro macro, creating the figure shortcode from provided attributes and using a regular expression to remove any empty attributes." width="551" height="631"/>&lt;/a>
&lt;/figure>
&lt;p>And then lastly the figure shortcode text is inserted by pasting, which is handy because it end up on the clipboard if anything goes wrong — like it did when I changed the focus when inserting the previous screenshot!&lt;/p></description></item><item><title>The Atom: A Love Affair</title><link>https://www.robjwells.com/2020/05/the-atom-a-love-affair/</link><pubDate>Sun, 24 May 2020 08:15:00 +0100</pubDate><guid>https://www.robjwells.com/2020/05/the-atom-a-love-affair/</guid><description>&lt;p>I watched &lt;a href="https://theatomfilm.com/">The Atom: A Love Affair&lt;/a> last night, a new documentary about the history of nuclear power, and it’s really great. It charts the ups and downs of nuclear power, its promoters and opponents, and looks at where we are today. I think its great strength is that it sets out the surrounding context. It doesn’t take a side but gives a fair accounting (which &lt;a href="https://cnduk.org/campaigns/no-nuclear-power/">I think leads to a clear conclusion&lt;/a>, though I would, wouldn’t I?).&lt;/p>
&lt;p>You can &lt;a href="https://www.curzonhomecinema.com/film/watch-atom-a-love-affair-online">stream it online at Curzon Home Cinema&lt;/a>, and I highly recommend it.&lt;/p>
&lt;p>There’s &lt;a href="https://www.youtube.com/watch?v=RqUnaEi9UgM">a Q&amp;amp;A session held after the film’s premiere&lt;/a>, and more info on &lt;a href="https://www.facebook.com/theatomfilm">the Facebook page&lt;/a>. There’s also &lt;a href="https://www.bbc.co.uk/sounds/play/m000jg85">an episode of Radio 3’s Sound of Cinema with the film’s composer Paul Honey&lt;/a>.&lt;/p></description></item><item><title>Calculating annual leave entitlement</title><link>https://www.robjwells.com/2020/05/calculating-annual-leave-entitlement/</link><pubDate>Sat, 23 May 2020 18:00:00 +0100</pubDate><guid>https://www.robjwells.com/2020/05/calculating-annual-leave-entitlement/</guid><description>&lt;p>In my current job, and for much of my last job, I induct new employees and make some of the arrangements for leaving employees.
Part of that is working out how much annual leave they’re entitled to.
Unfortunately people tend not to start exactly at the beginning of the leave year and leave exactly at the end of the leave year.&lt;/p>
&lt;p>Many years ago I wrote a simple Python script to do this for me — it asks for the start and end dates, and prints out how much annual leave the person would accrue over that period.&lt;/p>
&lt;p>You can &lt;a href="https://annualleavecalculator-end-date.robjwells.repl.run/">run the calculator in your browser at Repl.it&lt;/a>.
(It has an odd name in the URL because originally the script only handled new starts, not leavers, and I don’t want to break the URL for my old colleagues who use it.)&lt;/p>
&lt;p>I’ve cleaned it up today after seeing that &lt;a href="https://repl.it/talk/announcements/Feedback-for-git-support-the-new-GitHub-integration/21631">Repl.it can publish new repos to GitHub&lt;/a> (though that feature has some &lt;a href="https://repl.it/talk/announcements/1-to-this-feature-thanks-but-I-came/21631/175353">rough edges&lt;/a>).&lt;/p>
&lt;p>You can &lt;a href="https://github.com/robjwells/annual_leave_calculator/blob/master/main.py">find the code on GitHub&lt;/a>.
Mostly it’s uninteresting, the first 40 lines being the module docstring and the last 30 being mostly wrappers around &lt;code>input()&lt;/code>, so here’s the meat of it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="c1"># Modify these constants to suit your circumstances&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="n">DEFAULT_AL_YEAR_START&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">date&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">today&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">month&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">day&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="n">DEFAULT_AL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">28&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="n">RESULT_DECIMAL_PLACES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="kc">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="n">al_for_full_year&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prompt_for_al_amount&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="n">al_year_start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prompt_for_date&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;Leave year start&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="n">default&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">DEFAULT_AL_YEAR_START&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="n">al_year_end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">al_year_start&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">replace&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="n">year&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">al_year_start&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">year&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">timedelta&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">days&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="n">start_date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prompt_for_date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Employee start&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">default&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">al_year_start&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="n">end_date&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prompt_for_date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Employee finish&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">default&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">al_year_end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> &lt;span class="n">al_year_days&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">al_year_end&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">al_year_start&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">days&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> &lt;span class="n">employed_days&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">end_date&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">start_date&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">days&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> &lt;span class="c1"># +1 as we assume, eg, starting and leaving on Jan 1 accrues&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl"> &lt;span class="c1"># 1 day&amp;#39;s worth of leave, not zero&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">26&lt;/span>&lt;span class="cl"> &lt;span class="n">proportion_of_al_year_worked&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">employed_days&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">al_year_days&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">27&lt;/span>&lt;span class="cl"> &lt;span class="n">al_days_available&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">al_for_full_year&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">proportion_of_al_year_worked&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">28&lt;/span>&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">29&lt;/span>&lt;span class="cl"> &lt;span class="nb">round&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">al_days_available&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RESULT_DECIMAL_PLACES&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">30&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;days annual leave&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">31&lt;/span>&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One thing to state up front is that this only considers leave accrual within a single annual leave year.
Crossing a leave-year boundary isn’t as simple as adding additional leave, as it’ll typically involve some limit on how much leave can be carried across (which may be zero).&lt;/p>
&lt;p>There’s also little error-handling, so if you enter something that parses but is nonsensical (negative amount of leave, an end date earlier than the start date) then the result will be nonsensical.&lt;/p>
&lt;p>Until I refactored the script today, I’d made assumptions about the leave year that meant you’d have to edit the script more than a little to use leave years that don’t match the calendar year.
I changed that today by prompting the user for the start of the leave year (defaulting to January 1) and calculating the leave year end with some basic date manipulation in lines 14-16.
(This was to fix a regression I introduced, not the result of any great foresight!)&lt;/p>
&lt;p>This manipulation isn’t completely robust, but if you say your leave year starts on February 29 then that’s your responsibility.&lt;/p>
&lt;p>Lines 21 &amp;amp; 22 are noteworthy for the &lt;code>+ 1&lt;/code>, so that you get an inclusive range of days, with the assumption being that the person works on the “start day” and also on the “finish day”.
There’s some redundancy between lines 16 and 21, calculating the leave year by subtracting a day and adding it back later, but that’s to fit my mental model that the leave year runs eg from January 1 to December 31, and not January 1 to January 1.&lt;/p>
&lt;p>The rest of the script just works out the proportion of the leave year worked against the length of the full leave year, and computes the same proportion of the total number of leave days available for the full year.&lt;/p>
&lt;p>Nothing really tricky, but I work in a small company so it’s easy to misremember the process when you only do it a couple of times a year.&lt;/p>
&lt;p>Here’s an example session:&lt;/p>
&lt;pre tabindex="0">&lt;code>How many days annual leave for the full year? [28] 30
Leave year start date [2020-01-01]: 2020-04-01
Employee start date [2020-04-01]:
Employee finish date [2021-03-31]: 2020-06-05
5.42 days annual leave
&lt;/code>&lt;/pre>&lt;p>It’s a bit awkward to put in a “start date” for employees who have been employed since before the start of the leave year, and similar for employees who (you hope!) will continue past the end of the leave year, but the prompting helpers take a default value which you can accept by pressing return.&lt;/p>
&lt;p>There’s no need to review the prompting helper functions but I will take a moment to appreciate the signature of the typed wrapper around &lt;code>input()&lt;/code>.
It is generic over some type &lt;code>T&lt;/code>, takes a function &lt;code>str → T&lt;/code>, and a default &lt;code>T&lt;/code>, which is returned if the user input is empty.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">T&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TypeVar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;T&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">_prompt_wrapper&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">message&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parser&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Callable&lt;/span>&lt;span class="p">[[&lt;/span>&lt;span class="nb">str&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">default&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A more general version would probably take a &lt;code>T?&lt;/code> as the default and perhaps have &lt;code>T?&lt;/code> as the return type also if parsing fails.
But in this case all callers supply a default and, as far as the callers are concerned, parsing never fails because the user is prompted repeatedly until they enter something that does parse (or they accept the default).&lt;/p></description></item></channel></rss>