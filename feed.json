{"version":"https://jsonfeed.org/version/1","title":"Primary Unit","home_page_url":"https://www.robjwells.com/","feed_url":"https://www.robjwells.com/feed.json","description":"A blog by Rob Wells, mostly about computer stuff.","author":{"name":"Rob Wells","url":"https://www.robjwells.com/about","avatar":"https://www.robjwells.com/images/rob-scafell-pike.jpg"},"items":[{"id":"https://www.robjwells.com/2021/02/how-to-wrap-bc-to-do-calculations/","url":"https://www.robjwells.com/2021/02/how-to-wrap-bc-to-do-calculations/","title":"How to wrap bc to do calculations","date_published":"2021-02-23T18:14:00Z","content_html":"\u003caside class=\"flag\"\u003e\n    \u003cp\u003eThis was \u003ca href=\"https://github.com/robjwells/til/blob/main/shell/202102230701%20How%20to%20wrap%20bc%20to%20do%20calculations.md\"\u003eoriginal published as a TIL\u003c/a\u003e but I thought it was interesting enough to post on its own.\u003c/p\u003e\n    \u003cp\u003eFunnily enough, the planets seem to have aligned and \u003ca href=\"https://leancrew.com/all-this/2021/02/some-bc-stuff/\"\u003eDr Drang has also written about \u003ccode\u003ebc\u003c/code\u003e today\u003c/a\u003e.\u003c/p\u003e\n\u003c/aside\u003e\n\u003chr\u003e\n\u003cp\u003eI find \u003ca href=\"https://www.gnu.org/software/bc/\"\u003e\u003ccode\u003ebc\u003c/code\u003e\u003c/a\u003e trips me up when I try to calculations at the shell, so I wrapped it.\u003c/p\u003e\n\u003cp\u003eThere are two hazards for me:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFailure to handle expressions without a final newline.\u003c/li\u003e\n\u003cli\u003eInteger division.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"final-newline-missing\"\u003eFinal newline missing\u003c/h3\u003e\n\u003cp\u003eNo 1 often occurs when I produce a list of numbers in \u003ca href=\"https://www.barebones.com/products/bbedit/\"\u003eBBEdit\u003c/a\u003e, usually extracted and transformed via regexes.\u003c/p\u003e\n\u003cp\u003eFor example, we get a PDF receipt from Sainbury’s for our online shopping, and to work out my share I like to edit the text from \u003ca href=\"https://linux.die.net/man/1/pdftotext\"\u003e\u003ccode\u003epdftotext\u003c/code\u003e\u003c/a\u003e in BBEdit, then run the line totals through a pipeline to calculate the total.\u003c/p\u003e\n\u003cp\u003eThat used to look like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e$ pbpaste \u003cspan class=\"p\"\u003e|\u003c/span\u003e paste -s -d \u003cspan class=\"s1\"\u003e\u0026#39;+\u0026#39;\u003c/span\u003e - \u003cspan class=\"p\"\u003e|\u003c/span\u003e bc\n\u003cspan class=\"m\"\u003e609\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003epbpaste\u003c/code\u003e pastes the macOS system clipboard, \u003ca href=\"https://linux.die.net/man/1/paste\"\u003e\u003ccode\u003epaste\u003c/code\u003e\u003c/a\u003e joins those lines with \u003ccode\u003e+\u003c/code\u003e, and \u003ccode\u003ebc\u003c/code\u003e (should!) print the total.\u003c/p\u003e\n\u003cp\u003eExcept this happens if you’re missing a final newline:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e$ pbpaste \u003cspan class=\"p\"\u003e|\u003c/span\u003e paste -s -d \u003cspan class=\"s1\"\u003e\u0026#39;+\u0026#39;\u003c/span\u003e - \u003cspan class=\"p\"\u003e|\u003c/span\u003e bc\n\u003cspan class=\"o\"\u003e(\u003c/span\u003estandard_in\u003cspan class=\"o\"\u003e)\u003c/span\u003e 1: parse error\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"integer-division\"\u003eInteger division\u003c/h2\u003e\n\u003cp\u003eAnd secondly, with the default settings, \u003ccode\u003ebc\u003c/code\u003e does integer division:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e$ bc \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;\u003c/span\u003e 9/2\n\u003cspan class=\"m\"\u003e4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhich can be fixed by setting \u003ccode\u003escale\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e$ bc \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;scale=2; 9/2\u0026#39;\u003c/span\u003e\n4.50\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(\u003ccode\u003e\u0026lt;\u0026lt;\u0026lt;\u003c/code\u003e starts a “here-string”, which you can learn more about at \u003ccode\u003eman -P \u0026quot;less -p '\u0026lt;\u0026lt;\u0026lt;'\u0026quot; zshmisc\u003c/code\u003e, which will take you directly to the right part of the \u003ccode\u003ezshmisc\u003c/code\u003e man page. Search the \u003ccode\u003ebash\u003c/code\u003e man page if you’re using \u003ccode\u003ebash\u003c/code\u003e, but it’s significantly more terse than the \u003ccode\u003ezsh\u003c/code\u003e explanation.)\u003c/p\u003e\n\u003ch3 id=\"wrapping-bc\"\u003eWrapping \u003ccode\u003ebc\u003c/code\u003e\u003c/h3\u003e\n\u003cp\u003eSo I wrote a simple wrapper script, \u003ccode\u003ecalc\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/local/bin/zsh\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -euo pipefail\n\n\u003cspan class=\"c1\"\u003e# Read expression from $1 or stdin.\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e \u003cspan class=\"nv\"\u003e$#\u003c/span\u003e -ge \u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003eexpression\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eread\u003c/span\u003e expression \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# Force successful exit\u003c/span\u003e\n\u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# Default scale to 3 (.123) if $2 is not given.\u003c/span\u003e\nbc \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;scale=\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003e2\u003c/span\u003e\u003cspan class=\"k\"\u003e:-\u003c/span\u003e\u003cspan class=\"nv\"\u003e3\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e; \u003c/span\u003e\u003cspan class=\"nv\"\u003e$expression\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe conditional in the middle just handles being called in a pipe, with the expression coming on standard input, or having the expression provided as the first argument. The \u003ccode\u003e|| true\u003c/code\u003e is necessary after \u003ccode\u003eread\u003c/code\u003e as \u003ca href=\"https://stackoverflow.com/questions/40547032/bash-read-returns-with-exit-code-1-even-though-it-runs-as-expected\"\u003e\u003ccode\u003eread\u003c/code\u003e only exits with a success code if it encounters EOF\u003c/a\u003e, and since I have \u003ccode\u003e-e\u003c/code\u003e set in the file, that would cause the whole script to exit.\u003c/p\u003e\n\u003cp\u003eI set the scale to 3 by default (showing 3 decimal places), but you can configure that with the second argument.\u003c/p\u003e\n\u003cp\u003eUsing a here-string for \u003ccode\u003ebc\u003c/code\u003e’s input means that it should work whether or not there is a final newline.\u003c/p\u003e\n\u003cp\u003eThe use of \u003ccode\u003eread\u003c/code\u003e also allows the use of \u003ccode\u003ecalc\u003c/code\u003e by itself to print the result of one expression, for example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e$ calc\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e + 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e / \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e10\u003c/span\u003e / 2\u003cspan class=\"o\"\u003e)\u003c/span\u003e↩\n.800\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"wrapping-summation\"\u003eWrapping summation\u003c/h3\u003e\n\u003cp\u003eI use the “sum this list of numbers” pipeline fairly often, and it’s easy to pull out into its own command. I’m just using an alias, which I’ve added to my \u003ccode\u003e.zshrc\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"nb\"\u003ealias\u003c/span\u003e ∑\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;paste -s -d \u0026#39;+\u0026#39; - | calc\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://linux.die.net/man/1/sum\"\u003e\u003ccode\u003esum\u003c/code\u003e\u003c/a\u003e is already taken, so \u003ca href=\"https://en.wikipedia.org/wiki/Summation#Capital-sigma_notation\"\u003e∑\u003c/a\u003e seemed appropriate. On macOS you can type it with ⌥w.\u003c/p\u003e\n\u003cp\u003eSo my pipeline from before just becomes \u003ccode\u003epbpaste | ∑\u003c/code\u003e.\u003c/p\u003e\n"},{"id":"https://www.robjwells.com/2020/07/give-pythons-static-typing-a-go/","url":"https://www.robjwells.com/2020/07/give-pythons-static-typing-a-go/","title":"Give Python’s static typing a go","date_published":"2020-07-08T06:00:00+01:00","content_html":"\u003cp\u003eWhile my go-to language is still Python, at \u003ca href=\"https://www.dcs.bbk.ac.uk/\"\u003euniversity\u003c/a\u003e I’ve also used Java and C#.\nI have to say, there was a huge amount to like — much to my surprise initially!\u003c/p\u003e\n\u003cp\u003ePreviously I’d kind of written off Java as being a \u003ca href=\"https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition\"\u003eboring language for boring businesspeople\u003c/a\u003e.\nThere are certainly elements of that (\u003ccode\u003epackage com.robjwells.MyPackage;\u003c/code\u003e in \u003ccode\u003esrc/main/java/com/robjwells/MyPackage.java\u003c/code\u003e) but there’s a lot to like.\nStreams are great, lambdas are great, the standard library is great (though not without its rough edges, such as the repeated attempts at date and time), and the tooling is great (I have actually come round to really like \u003ca href=\"https://www.jetbrains.com/idea/\"\u003eIntelliJ IDEA\u003c/a\u003e — certainly buying a full licence when my academic licence expires).\nPlus, it’s really coming along at a clip now with the shorter release cycle.\u003c/p\u003e\n\u003cp\u003eAnd C# was an even more pleasant surprise. It’s easy to get the impression that it’s “Microsoft’s Java”, but that’s really selling it short.\n\u003ca href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\"\u003eLINQ\u003c/a\u003e is a joy that makes \u003ca href=\"https://www.youtube.com/watch?v=ei71YpmfRX4\"\u003ecomprehensions in Python\u003c/a\u003e (of which I am a huge fan!) seem… just a bit clunky. But C# is full of features, not just LINQ, that make working in it a real pleasure. (I will say, though, that at least on the Mac \u003ca href=\"https://www.jetbrains.com/rider/\"\u003eRider\u003c/a\u003e is a far superior editor than Visual Studio.)\u003c/p\u003e\n\u003cp\u003eAll of this is to say, in a round-about way, that those \u003cem\u003eweird verbose enterprise-y languages\u003c/em\u003e have a lot going for them — even in the still small-scale things that I’m working on where without this exposure I would just use Python.\u003c/p\u003e\n\u003cp\u003eNow, I still \u003cem\u003eam\u003c/em\u003e using Python, but there are things that I miss.\nChief among them in Python is having the type system actively help me out. \u003ca href=\"https://www.executeprogram.com/blog/porting-to-typescript-solved-our-api-woes\"\u003eGary Bernhardt writes a bit about this in the context of Ruby and TypeScript\u003c/a\u003e. (Be warned there are trivial examples ahead.)\u003c/p\u003e\n\u003cp\u003eNow, I’m using \u003ca href=\"https://code.visualstudio.com/\"\u003eVSCode\u003c/a\u003e so actually the editor will step in and help you even if you do nothing to aid it. For instance, in the following situation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"c1\"\u003e# untyped.py v1\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eultimate_answer\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eultimate_answer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eVSCode (using the \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=ms-python.python\"\u003ePython extension\u003c/a\u003e) will correctly infer that the type of \u003ccode\u003eu\u003c/code\u003e is \u003ccode\u003eint\u003c/code\u003e. So let’s do something with that:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"c1\"\u003e# untyped.py v2\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eultimate_answer\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e42\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003edo_something\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edo_something\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eultimate_answer\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eVSCode still correctly infers \u003ccode\u003eu\u003c/code\u003e to be an \u003ccode\u003eint\u003c/code\u003e. Great! But let’s be clear: this is VSCode doing the work so that it can offer you handy things like code completion.\u003c/p\u003e\n\u003cp\u003eWhat happens if we have a change in requirements and we change our API… only we don’t catch everything so we end up with the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"c1\"\u003e# untyped.py v3\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eultimate_answer\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;42\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003edo_something\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edo_something\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eultimate_answer\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAt this point, VSCode gives up: \u003ccode\u003eu\u003c/code\u003e is an \u003ccode\u003eint\u003c/code\u003e or it’s a \u003ccode\u003estr\u003c/code\u003e. In fact it’s neither, because \u003ccode\u003edo_something()\u003c/code\u003e raises a \u003ccode\u003eTypeError\u003c/code\u003e so \u003ccode\u003eu\u003c/code\u003e is never assigned. This is “obvious” to a human reading the code, in this simple example, but it’s easy to imagine a complex system where the types get out of line but the definitions are far apart from each other and the eventual call site.\u003c/p\u003e\n\u003cp\u003eThere are type checkers for Python, the main one being \u003ca href=\"http://www.mypy-lang.org/\"\u003emypy\u003c/a\u003e (which is great!). Can mypy help us here?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ mypy untyped.py\nSuccess: no issues found in 1 source file\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOh, success! Great.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ python3 untyped.py\nTraceback (most recent call last):\n  File \u0026quot;untyped.py\u0026quot;, line 10, in \u0026lt;module\u0026gt;\n    main()\n  File \u0026quot;untyped.py\u0026quot;, line 8, in main\n    u = do_something(ultimate_answer())\n  File \u0026quot;untyped.py\u0026quot;, line 5, in do_something\n    return n - 11\nTypeError: unsupported operand type(s) for -: 'str' and 'int'\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAh, no, no magic was performed and we still have a \u003ccode\u003eTypeError\u003c/code\u003e. It’s worth pointing out here that mypy is all about gradual typing — adding type annotations to your programs as and when. If there are no annotations, there are no checks performed. It’s not clairvoyant.\u003c/p\u003e\n\u003cp\u003eIf we switch back to VSCode, what if we try \u003ca href=\"https://devblogs.microsoft.com/python/announcing-pylance-fast-feature-rich-language-support-for-python-in-visual-studio-code/\"\u003eMicrosoft’s shiny new Pylance extension\u003c/a\u003e? In the basic type-checking mode it reports that the type of \u003ccode\u003eu\u003c/code\u003e is unknown which … is a step in the right direction? But no warnings.\u003c/p\u003e\n\u003cp\u003eIf we ratchet up the type-checking mode to strict it reports, with a bunch of red error squiggles, that the return type of \u003ccode\u003edo_something()\u003c/code\u003e is unknown and the type of \u003ccode\u003eu\u003c/code\u003e is unknown. We get a similar result if we pass the \u003ccode\u003e--strict\u003c/code\u003e flag to mypy, which essentially tells the type checker “forget about this gradual business” and attempts to check the whole file. This effectively fails, because we’ve done nothing to help it. Let’s do that now.\u003c/p\u003e\n\u003cp\u003eIn fact, very little is needed before Pylance starts to push you in the right direction, only this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"c1\"\u003e# typed.py v1 excerpt\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003edo_something\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter which we’re rewarded with red squiggles underneath the call to \u003ccode\u003eultimate_answer()\u003c/code\u003e that provides the argument inline to \u003ccode\u003edo_something()\u003c/code\u003e. The message we get is interesting because it reveals something about the knowledge of the type-checker:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eArgument of type \u0026quot;Literal['42']\u0026quot; cannot be assigned to\nparameter \u0026quot;n\u0026quot; of type \u0026quot;int\u0026quot; in function \u0026quot;do_something\u0026quot;\n  \u0026quot;Literal['42']\u0026quot; is incompatible with \u0026quot;int\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe haven’t typed \u003ccode\u003eultimate_answer()\u003c/code\u003e, but it knows that \u0026ldquo;42\u0026rdquo; can’t be treated as an \u003ccode\u003eint\u003c/code\u003e. Mypy needs a little more help to get there:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"c1\"\u003e# typed.py v2 excerpt\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eultimate_answer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;42\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003edo_something\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo, at this point we’ve said that \u003ccode\u003eultimate_answer()\u003c/code\u003e returns a string and that \u003ccode\u003edo_something()\u003c/code\u003e takes an integer. What does mypy think?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; $ mypy typed.py\nSuccess: no issues found in 1 source file\n\n\u0026gt; $ mypy --strict typed.py\n[…snip…]\ntyped.py:8: error: Argument 1 to \u0026quot;do_something\u0026quot; has\n    incompatible type \u0026quot;str\u0026quot;; expected \u0026quot;int\u0026quot;\n[…snip…]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is an interesting situation because \u0026ldquo;normal\u0026rdquo; mode mypy reports that this is fine, no problems here. Strict mode complains — among other things — that the types don’t match. Finally, this is what we want.\u003c/p\u003e\n\u003cp\u003eBut why doesn’t “normal” mode mypy not see the problem? I think this is to do with what is considered a “typed context”. By using \u003ccode\u003e--strict\u003c/code\u003e we force everything to be a typed context, so we get a lot more warnings and errors from mypy. But without this, \u003ccode\u003emain()\u003c/code\u003e is not a typed context — it has no typed arguments, and no explicit return type, so “normal” mode mypy just skips over it.\u003c/p\u003e\n\u003cp\u003eThe strength of gradual typing is that if you don’t want to or aren’t ready to add type information, you don’t. But even in this toy example, the standard Python type-checker under its default settings does not pick up this “obvious” (to us!) type error. In \u003ca href=\"https://www.youtube.com/watch?v=ST33zDM9vOE\u0026amp;feature=youtu.be\"\u003eDustin Ingram’s Pycon talk about static typing\u003c/a\u003e he says you should use static typing everywhere — for a few reasons, but here we can see that failing to do so leaves a clear error undetected..\u003c/p\u003e\n\u003cp\u003eIt doesn’t take much to rectify that for mypy, just a return type on \u003ccode\u003emain()\u003c/code\u003e, yielding the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"c1\"\u003e# typed.py v3\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eultimate_answer\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;42\u0026#34;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003edo_something\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e11\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"bp\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eu\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edo_something\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eultimate_answer\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd now \u003ccode\u003emypy typed.py\u003c/code\u003e gives the same error that strict mode did for the previous example. Adding the explicit return type to \u003ccode\u003emain()\u003c/code\u003e is honestly pretty useless, but now it opens up the definition of \u003ccode\u003emain()\u003c/code\u003e to be type checked, at which point the error is spotted.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eI wrote the title of this blog post before I really knew where I was going (I have a Beeminder deadline to hit!) so at this point it feels to me like I haven’t quite delivered on (why you should) “Give Python’s static typing a go”. Really we’re at “If you decide to use Python’s static typing you need to go all-in.” Which actually is something I do believe! I think the strictest settings are the most useful, but leaving something untyped leaves a hole for type errors to sneak through.\u003c/p\u003e\n\u003cp\u003eBut it is useful in itself. It’s unfamiliar and, honestly, a bit clunky in Python. (The dance for declaring a \u003ccode\u003eTypeVar\u003c/code\u003e for a generic function taking some type \u003ccode\u003eT\u003c/code\u003e is … Not Good and looks worse once you run your code through a formatter, with it then two lines away.)\u003c/p\u003e\n\u003cp\u003eBut thinking about types is thinking about design, and thinking about the contract that you’re willing to offer to the outside world. I’ve found that in Java and C# sometimes I’m ready to bound straight into defining a function … only to stop after realising that I haven’t really clarified what expectations I have of the outside world (parameter types) and what expectations the outside world has of me (return type).\u003c/p\u003e\n\u003cp\u003eHere’s a dead-obvious example from a simple exercise on \u003ca href=\"https://exercism.io/\"\u003eExercism\u003c/a\u003e (sorry for any spoilers but I should hope this one is straightforward to anyone with any knowledge of the \u003ccode\u003edatetime\u003c/code\u003e module!):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edatetime\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003edatetime\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etimedelta\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eGIGASECOND\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etimedelta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eseconds\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"n\"\u003e_000_000_000\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emoment\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003edatetime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edatetime\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003emoment\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eGIGASECOND\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow, \u003ccode\u003eadd()\u003c/code\u003e is a bad name in general but fine in this confined case, but it’s the simple addition of the \u003ccode\u003edatetime\u003c/code\u003e annotations that make it clear what we’re handling here. You give a datetime, receive a datetime. Nothing fancy, but compare with the following signature:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emoment\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt’s concise, sure, but is the cost in understanding worth it? Explicitly annotating the types forces you to consider what the interface is and, in return, tools like mypy will give you a hand in finding bugs.\u003c/p\u003e\n\u003cp\u003eAnyway, give \u003ca href=\"https://www.youtube.com/watch?v=ST33zDM9vOE\u0026amp;feature=youtu.be\"\u003eDustin Ingram’s talk\u003c/a\u003e a watch (check out those t-shirts!) as it’s informative, straightforward and short. Do check out the \u003ca href=\"https://mypy.readthedocs.io/en/stable/index.html\"\u003emypy documentation\u003c/a\u003e, as there’s plenty of descriptive information in there beyond the interface to the command line tool and the \u003ccode\u003etyping\u003c/code\u003e module. \u003ca href=\"https://www.youtube.com/watch?v=7ZbwZgrXnwY\"\u003eJukka Lehtosalo and David Fisher spoke in some detail at Pycon 2017 about mypy\u003c/a\u003e, and I highly recommend \u003ca href=\"https://dropbox.tech/application/our-journey-to-type-checking-4-million-lines-of-python\"\u003eJukka’s article on the Dropbox tech blog that looks at the history and practical aspects of mypy\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIt’s clear also that this is the direction of travel for Python — there is a lot on the horizon that will make life easier (see \u003ca href=\"https://www.python.org/dev/peps/\"\u003ethe list of PEPs\u003c/a\u003e), and I’m particularly looking forward to seeing what becomes of \u003ca href=\"https://www.python.org/dev/peps/pep-0622/\"\u003ePEP 622\u003c/a\u003e as at the moment it looks like it will bring with it \u003ca href=\"https://fsharpforfunandprofit.com/posts/discriminated-unions/\"\u003esum types\u003c/a\u003e, even if it is a year or two off at this point.\u003c/p\u003e\n"},{"id":"https://www.robjwells.com/2020/06/scheduling-posts-in-hugo/","url":"https://www.robjwells.com/2020/06/scheduling-posts-in-hugo/","title":"Scheduling posts in Hugo","date_published":"2020-06-06T06:00:00+01:00","content_html":"\u003cp\u003eMy enthusiasm for writing posts here tends to come in reasonably short bursts, usually over a weekend, so I’ve taken to scheduling the two or three posts I might write over the following weeks.\u003c/p\u003e\n\u003cp\u003eIt’s reasonably straightforward to schedule publication with \u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e by using the \u003ccode\u003epublishDate\u003c/code\u003e attribute in your post frontmatter. For instance, this is the frontmatter for this post right now:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Scheduling posts in Hugo\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003edate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"ld\"\u003e2020-05-24T09:25:44\u003c/span\u003e\u003cspan class=\"m\"\u003e+01\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"m\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003epublishDate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"ld\"\u003e2020-06-06T06:00:00\u003c/span\u003e\u003cspan class=\"m\"\u003e+01\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"m\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003edraft\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003edate\u003c/code\u003e attribute is filled in by Hugo when I create the post bundle skeleton. I tend to leave this as a marker for when I started writing a post (though I have changed it for posts that I start, leave for a while, and \u003ca href=\"/2020/05/keyboard-maestro-macro-to-insert-images-into-blog-posts/\"\u003efinish later\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003epublishDate\u003c/code\u003e attribute controls when the post is actually published. Hugo by default doesn’t build posts with this set in the future.\u003c/p\u003e\n\u003cp\u003eOne important change that I made from the defaults, though, is to define the handling of dates in my site-wide config file (\u003ccode\u003econfig.toml\u003c/code\u003e) like so:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003efrontmatter\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"nx\"\u003edate\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;publishDate\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;date\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;:default\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhat this means is that Hugo will prefer the \u003ccode\u003epublishDate\u003c/code\u003e as the date of the post, before falling back to the \u003ccode\u003edate\u003c/code\u003e attribute, and then resuming its default lookup, which is listed \u003ca href=\"https://gohugo.io/getting-started/configuration/#configure-dates\"\u003ein the Hugo documentation\u003c/a\u003e.\n(At the moment, the only other thing in the default lookup order is the file modification time, but mostly I include \u0026ldquo;:default\u0026rdquo; to be safe if this changes in the future.)\u003c/p\u003e\n\u003cp\u003eOtherwise, you might end up with a situation where you write “Post Future”, set a publish date in the future, then write “Post Now” and publish immediately, and when “Post Future” is published it will be shown as being published earlier than “Post Now” because its \u003ccode\u003edate\u003c/code\u003e is earlier. Changing the date lookup order in the config will preserve your deliberate schedule.\u003c/p\u003e\n\u003cp\u003e(Thanks to “n m” on StackOverflow who got me started \u003ca href=\"https://stackoverflow.com/questions/59655470/hugo-date-vs-publishdate/59760977#59760977\"\u003ewith this answer\u003c/a\u003e.)\u003c/p\u003e\n\u003cp\u003eObviously, just having a bunch of files with the dates set properly doesn’t mean your post will actually be published automatically at the right time.\nI have a script on my server that cron runs every 15 minutes that pulls from \u003ca href=\"https://github.com/robjwells/primaryunit\"\u003ethe GitHub repository\u003c/a\u003e and rebuilds the site.\u003c/p\u003e\n\u003cp\u003eThis set-up is made easy thanks to Hugo being a single binary, so it’s simple to install on the server, whereas \u003ca href=\"https://github.com/robjwells/majestic/\"\u003ebefore\u003c/a\u003e I would generally build the site locally and upload it to my server with rsync.\u003c/p\u003e\n\u003cp\u003eHugo can list posts that are scheduled in the future:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-zsh\" data-lang=\"zsh\"\u003e$ hugo list future\ncontent/posts/2020/05/24/scheduling-posts-in-hugo/index.md,2020-06-06T06:00:00+01:00\ncontent/posts/2020/05/24/keyboard-maestro-macro-to-insert-images-into-blog-posts/index.md,2020-05-30T06:00:00+01:00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is a bit noisy, so here’s a sed one-liner to improve things slightly:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-zsh\" data-lang=\"zsh\"\u003e$ hugo list future \u003cspan class=\"p\"\u003e|\u003c/span\u003e sed -E \u003cspan class=\"s1\"\u003e\u0026#39;s/^.+\\/([^\\/]+)\\/index.md,(.+)/\\2 - \\1/\u0026#39;\u003c/span\u003e\n2020-06-06T06:00:00+01:00 - scheduling-posts-in-hugo\n2020-05-30T06:00:00+01:00 - keyboard-maestro-macro-to-insert-images-into-blog-posts\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e(This assumes that you’re using \u003ca href=\"https://gohugo.io/content-management/page-bundles/\"\u003epage bundles\u003c/a\u003e.)\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eI actually now have a \u003ca href=\"https://www.beeminder.com/robjwells/blog\"\u003eBeeminder goal\u003c/a\u003e to ensure that I write a post a month — well, I was being lenient with myself so it’s every 31 days. It’s also set for a maximum 31 safe days, so I feel that scheduling once a week is enough to tamp down any short-term blog-mania while also not gaming the Beeminder goal too much by scheduling posts at 31-day intervals. (Perhaps this is a sign though that I can set the goal to have a shorter period, but at the moment I have enough commitments that I don’t feel comfortable doing so.)\u003c/p\u003e\n"},{"id":"https://www.robjwells.com/2020/05/keyboard-maestro-macro-to-insert-images-into-blog-posts/","url":"https://www.robjwells.com/2020/05/keyboard-maestro-macro-to-insert-images-into-blog-posts/","title":"Keyboard Maestro macro to insert images into blog posts","date_published":"2020-05-30T06:00:00+01:00","content_html":"\u003cp\u003eHere’s a quick Keyboard Maestro macro to make it easier to insert images into blog posts, or any other markdown or HTML document really. The details of the macro are set up to create a \u003ca href=\"https://gohugo.io/content-management/shortcodes/#figure\"\u003eHugo figure shortcode\u003c/a\u003e, but the Hugo-specific bits are just scaffolding and could be swapped out for whatever you need.\u003c/p\u003e\n\u003cp\u003eYou can \u003ca href=\"insert-hugo-figure.kmmacros\"\u003edownload the macro file here\u003c/a\u003e, but the whole thing ended up being a bit long so I’m not going to include the usual image of the whole macro (which is 1,965 pixels tall). Let’s step through it.\u003c/p\u003e\n\u003cfigure class=\"full-width no-border\"\u003e\u003ca href=\"macro-1-prompt-and-read.png\"\u003e\n    \u003cimg src=\"macro-1-prompt-and-read.png\"\n         alt=\"A screenshot showing a portion of a Keyboard Maestro macro, prompting the user for a file and then reading it.\" width=\"551\" height=\"275\"/\u003e \u003c/a\u003e\u003cfigcaption\u003e\n            \u003cp\u003eThe first stage of the macro, prompting for the image file and then loading it onto a named clipboard.\u003c/p\u003e\n        \u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003eAfter selecting the image, we need to load it onto a named clipboard because Keyboard Maestro’s image actions generally work on the contents of a clipboard.\u003c/p\u003e\n\u003cfigure class=\"full-width no-border\"\u003e\u003ca href=\"macro-2-store-properties.png\"\u003e\n    \u003cimg src=\"macro-2-store-properties.png\"\n         alt=\"A screenshot showing a portion of a Keyboard Maestro macro, reading image properties into variables.\" width=\"551\" height=\"312\"/\u003e \u003c/a\u003e\u003cfigcaption\u003e\n            \u003cp\u003eNext we extract needed properties from the image into Keyboard Maestro variables.\u003c/p\u003e\n        \u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003eThen we need to prompt the user to confirm the attributes of the figure.\u003c/p\u003e\n\u003cfigure class=\"full-width no-border\"\u003e\u003ca href=\"macro-3-prompt-attributes.png\"\u003e\n    \u003cimg src=\"macro-3-prompt-attributes.png\"\n         alt=\"A screenshot showing a portion of a Keyboard Maestro macro, of a prompt to the user to confirm attributes for the figure to be inserted.\" width=\"551\" height=\"377\"/\u003e \u003c/a\u003e\u003cfigcaption\u003e\n            \u003cp\u003eThe prompt set-up.\u003c/p\u003e\n        \u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cfigure class=\"full-width no-border\"\u003e\u003ca href=\"macro-prompt.png\"\u003e\n    \u003cimg src=\"macro-prompt.png\"\n         alt=\"A screenshot showing a Keyboard Maestro prompt asking for attributes to complete an HTML figure\" width=\"537\" height=\"267\"/\u003e \u003c/a\u003e\u003cfigcaption\u003e\n            \u003cp\u003eAnd the prompt itself.\u003c/p\u003e\n        \u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003eAny of these can be empty, so after assembling the shortcode text blank attributes are removed:\u003c/p\u003e\n\u003cfigure class=\"full-width no-border\"\u003e\u003ca href=\"macro-4-assemble-figure.png\"\u003e\n    \u003cimg src=\"macro-4-assemble-figure.png\"\n         alt=\"A screenshot showing a portion of a Keyboard Maestro macro, creating the figure shortcode from provided attributes and using a regular expression to remove any empty attributes.\" width=\"551\" height=\"631\"/\u003e \u003c/a\u003e\n\u003c/figure\u003e\n\u003cp\u003eAnd then lastly the figure shortcode text is inserted by pasting, which is handy because it end up on the clipboard if anything goes wrong — like it did when I changed the focus when inserting the previous screenshot!\u003c/p\u003e\n"},{"id":"https://www.robjwells.com/2020/05/the-atom-a-love-affair/","url":"https://www.robjwells.com/2020/05/the-atom-a-love-affair/","title":"The Atom: A Love Affair","date_published":"2020-05-24T08:15:00+01:00","content_html":"\u003cp\u003eI watched \u003ca href=\"https://theatomfilm.com/\"\u003eThe Atom: A Love Affair\u003c/a\u003e last night, a new documentary about the history of nuclear power, and it’s really great. It charts the ups and downs of nuclear power, its promoters and opponents, and looks at where we are today. I think its great strength is that it sets out the surrounding context. It doesn’t take a side but gives a fair accounting (which \u003ca href=\"https://cnduk.org/campaigns/no-nuclear-power/\"\u003eI think leads to a clear conclusion\u003c/a\u003e, though I would, wouldn’t I?).\u003c/p\u003e\n\u003cp\u003eYou can \u003ca href=\"https://www.curzonhomecinema.com/film/watch-atom-a-love-affair-online\"\u003estream it online at Curzon Home Cinema\u003c/a\u003e, and I highly recommend it.\u003c/p\u003e\n\u003cp\u003eThere’s \u003ca href=\"https://www.youtube.com/watch?v=RqUnaEi9UgM\"\u003ea Q\u0026amp;A session held after the film’s premiere\u003c/a\u003e, and more info on \u003ca href=\"https://www.facebook.com/theatomfilm\"\u003ethe Facebook page\u003c/a\u003e. There’s also \u003ca href=\"https://www.bbc.co.uk/sounds/play/m000jg85\"\u003ean episode of Radio 3’s Sound of Cinema with the film’s composer Paul Honey\u003c/a\u003e.\u003c/p\u003e\n"},{"id":"https://www.robjwells.com/2020/05/calculating-annual-leave-entitlement/","url":"https://www.robjwells.com/2020/05/calculating-annual-leave-entitlement/","title":"Calculating annual leave entitlement","date_published":"2020-05-23T18:00:00+01:00","content_html":"\u003cp\u003eIn my current job, and for much of my last job, I induct new employees and make some of the arrangements for leaving employees.\nPart of that is working out how much annual leave they’re entitled to.\nUnfortunately people tend not to start exactly at the beginning of the leave year and leave exactly at the end of the leave year.\u003c/p\u003e\n\u003cp\u003eMany years ago I wrote a simple Python script to do this for me — it asks for the start and end dates, and prints out how much annual leave the person would accrue over that period.\u003c/p\u003e\n\u003cp\u003eYou can \u003ca href=\"https://annualleavecalculator-end-date.robjwells.repl.run/\"\u003erun the calculator in your browser at Repl.it\u003c/a\u003e.\n(It has an odd name in the URL because originally the script only handled new starts, not leavers, and I don’t want to break the URL for my old colleagues who use it.)\u003c/p\u003e\n\u003cp\u003eI’ve cleaned it up today after seeing that \u003ca href=\"https://repl.it/talk/announcements/Feedback-for-git-support-the-new-GitHub-integration/21631\"\u003eRepl.it can publish new repos to GitHub\u003c/a\u003e (though that feature has some \u003ca href=\"https://repl.it/talk/announcements/1-to-this-feature-thanks-but-I-came/21631/175353\"\u003erough edges\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eYou can \u003ca href=\"https://github.com/robjwells/annual_leave_calculator/blob/master/main.py\"\u003efind the code on GitHub\u003c/a\u003e.\nMostly it’s uninteresting, the first 40 lines being the module docstring and the last 30 being mostly wrappers around \u003ccode\u003einput()\u003c/code\u003e, so here’s the meat of it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"c1\"\u003e# Modify these constants to suit your circumstances\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e\u003cspan class=\"n\"\u003eDEFAULT_AL_YEAR_START\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edate\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etoday\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emonth\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eday\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e\u003cspan class=\"n\"\u003eDEFAULT_AL\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e28\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e\u003cspan class=\"n\"\u003eRESULT_DECIMAL_PLACES\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"bp\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e    \u003cspan class=\"n\"\u003eal_for_full_year\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprompt_for_al_amount\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e10\u003c/span\u003e    \u003cspan class=\"n\"\u003eal_year_start\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprompt_for_date\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e11\u003c/span\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;Leave year start\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e12\u003c/span\u003e        \u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eDEFAULT_AL_YEAR_START\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e13\u003c/span\u003e    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e14\u003c/span\u003e    \u003cspan class=\"n\"\u003eal_year_end\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eal_year_start\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereplace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e15\u003c/span\u003e        \u003cspan class=\"n\"\u003eyear\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eal_year_start\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eyear\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e16\u003c/span\u003e    \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003etimedelta\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edays\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e17\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e18\u003c/span\u003e    \u003cspan class=\"n\"\u003estart_date\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprompt_for_date\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Employee start\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eal_year_start\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e19\u003c/span\u003e    \u003cspan class=\"n\"\u003eend_date\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eprompt_for_date\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Employee finish\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eal_year_end\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e20\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e21\u003c/span\u003e    \u003cspan class=\"n\"\u003eal_year_days\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eal_year_end\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eal_year_start\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e22\u003c/span\u003e    \u003cspan class=\"n\"\u003eemployed_days\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eend_date\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003estart_date\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edays\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e23\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# +1 as we assume, eg, starting and leaving on Jan 1 accrues\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e24\u003c/span\u003e    \u003cspan class=\"c1\"\u003e# 1 day\u0026#39;s worth of leave, not zero\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e25\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e26\u003c/span\u003e    \u003cspan class=\"n\"\u003eproportion_of_al_year_worked\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eemployed_days\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003eal_year_days\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e27\u003c/span\u003e    \u003cspan class=\"n\"\u003eal_days_available\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eal_for_full_year\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eproportion_of_al_year_worked\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e28\u003c/span\u003e    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e29\u003c/span\u003e        \u003cspan class=\"nb\"\u003eround\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eal_days_available\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eRESULT_DECIMAL_PLACES\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e30\u003c/span\u003e        \u003cspan class=\"s2\"\u003e\u0026#34;days annual leave\u0026#34;\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e31\u003c/span\u003e    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOne thing to state up front is that this only considers leave accrual within a single annual leave year.\nCrossing a leave-year boundary isn’t as simple as adding additional leave, as it’ll typically involve some limit on how much leave can be carried across (which may be zero).\u003c/p\u003e\n\u003cp\u003eThere’s also little error-handling, so if you enter something that parses but is nonsensical (negative amount of leave, an end date earlier than the start date) then the result will be nonsensical.\u003c/p\u003e\n\u003cp\u003eUntil I refactored the script today, I’d made assumptions about the leave year that meant you’d have to edit the script more than a little to use leave years that don’t match the calendar year.\nI changed that today by prompting the user for the start of the leave year (defaulting to January 1) and calculating the leave year end with some basic date manipulation in lines 14-16.\n(This was to fix a regression I introduced, not the result of any great foresight!)\u003c/p\u003e\n\u003cp\u003eThis manipulation isn’t completely robust, but if you say your leave year starts on February 29 then that’s your responsibility.\u003c/p\u003e\n\u003cp\u003eLines 21 \u0026amp; 22 are noteworthy for the \u003ccode\u003e+ 1\u003c/code\u003e, so that you get an inclusive range of days, with the assumption being that the person works on the “start day” and also on the “finish day”.\nThere’s some redundancy between lines 16 and 21, calculating the leave year by subtracting a day and adding it back later, but that’s to fit my mental model that the leave year runs eg from January 1 to December 31, and not January 1 to January 1.\u003c/p\u003e\n\u003cp\u003eThe rest of the script just works out the proportion of the leave year worked against the length of the full leave year, and computes the same proportion of the total number of leave days available for the full year.\u003c/p\u003e\n\u003cp\u003eNothing really tricky, but I work in a small company so it’s easy to misremember the process when you only do it a couple of times a year.\u003c/p\u003e\n\u003cp\u003eHere’s an example session:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eHow many days annual leave for the full year? [28] 30\nLeave year start date [2020-01-01]: 2020-04-01\nEmployee start date [2020-04-01]:\nEmployee finish date [2021-03-31]: 2020-06-05\n5.42 days annual leave\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt’s a bit awkward to put in a “start date” for employees who have been employed since before the start of the leave year, and similar for employees who (you hope!) will continue past the end of the leave year, but the prompting helpers take a default value which you can accept by pressing return.\u003c/p\u003e\n\u003cp\u003eThere’s no need to review the prompting helper functions but I will take a moment to appreciate the signature of the typed wrapper around \u003ccode\u003einput()\u003c/code\u003e.\nIt is generic over some type \u003ccode\u003eT\u003c/code\u003e, takes a function \u003ccode\u003estr → T\u003c/code\u003e, and a default \u003ccode\u003eT\u003c/code\u003e, which is returned if the user input is empty.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eTypeVar\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;T\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003e_prompt_wrapper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"n\"\u003emessage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eparser\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eCallable\u003c/span\u003e\u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n    \u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA more general version would probably take a \u003ccode\u003eT?\u003c/code\u003e as the default and perhaps have \u003ccode\u003eT?\u003c/code\u003e as the return type also if parsing fails.\nBut in this case all callers supply a default and, as far as the callers are concerned, parsing never fails because the user is prompted repeatedly until they enter something that does parse (or they accept the default).\u003c/p\u003e\n"},{"id":"https://www.robjwells.com/2020/04/listing-shortlog-files-chronologically-with-launchbar/","url":"https://www.robjwells.com/2020/04/listing-shortlog-files-chronologically-with-launchbar/","title":"Listing shortlog files chronologically with LaunchBar","date_published":"2020-04-25T06:00:00+01:00","content_html":"\u003cp\u003eBuilding on \u003ca href=\"https://www.robjwells.com/2020/04/shortlogging/\"\u003emy introductory post about maintaining “shortlog” diary files\u003c/a\u003e, I quite often want to have a look at recent shortlog files.\u003c/p\u003e\n\u003cp\u003eI have my shortlog folder indexed by \u003ca href=\"https://www.obdev.at/products/launchbar/index.html\"\u003eLaunchBar\u003c/a\u003e, so I can browse the files that way. By default these are listed in lexicographically ascending order. You can reverse this by holding down command when navigating into the folder in LaunchBar.\u003c/p\u003e\n\u003cp\u003eHowever, that doesn’t resolve the problem that it’s not always easy to realise that 2020-04-13 is “Monday”.\u003c/p\u003e\n\u003cp\u003eSo I thought I would write a \u003ca href=\"https://developer.obdev.at/launchbar-developer-documentation/#/actions-overview\"\u003eLaunchBar action\u003c/a\u003e to do both.\u003c/p\u003e\n\u003cp\u003eDespite being my first, it was really very easy. I wrote it in JavaScript as the documentation leads you that way, and you don’t have to serialise to JSON and write to stdout to return values. LaunchBar provides some additional tools to make interacting with the system straightforward from JavaScript. (And, to be clear, this isn’t \u003ca href=\"https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/index.html\"\u003eJXA\u003c/a\u003e either.)\u003c/p\u003e\n\u003cp\u003eHere are the settings in the scripts pane in LaunchBar’s Action Editor:\u003c/p\u003e\n\u003cfigure class=\"full-width\"\u003e\u003ca href=\"action-editor-script-settings.png\"\u003e\n    \u003cimg src=\"action-editor-script-settings.png\"\n         alt=\"A screenshot of the scripts pane settings in LaunchBar’s action editor for a default script, showing the default settings except that it returns an Item\" width=\"510\" height=\"250\"/\u003e \u003c/a\u003e\n\u003c/figure\u003e\n\u003cp\u003eThis is a default script, taking no input. One thing to note is that it returns a result of type “Item” — an array of JavaScript objects with particular keys. You can read about the properties items can have \u003ca href=\"https://developer.obdev.at/launchbar-developer-documentation/#/actions-overview\"\u003ein the LaunchBar action developer documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnd here’s the code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-JavaScript\" data-lang=\"JavaScript\"\u003e\u003cspan class=\"ln\"\u003e 1\u003c/span\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eargument\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 2\u003c/span\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eshortlogDir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;~/Dropbox/notes/shortlog/\u0026#34;\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 3\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetDirectoryContents\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 4\u003c/span\u003e    \u003cspan class=\"nx\"\u003eshortlogDir\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 5\u003c/span\u003e  \u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efileName\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 6\u003c/span\u003e    \u003cspan class=\"o\"\u003e/^\u003c/span\u003e\u003cspan class=\"nx\"\u003eshortlog\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e}.\u003c/span\u003e\u003cspan class=\"nx\"\u003etxt$\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efileName\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 7\u003c/span\u003e  \u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efileName\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 8\u003c/span\u003e    \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisoString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efileName\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e19\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e 9\u003c/span\u003e    \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edateString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eLaunchBar\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eformatDate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e10\u003c/span\u003e      \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nb\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisoString\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e11\u003c/span\u003e      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e12\u003c/span\u003e        \u003cspan class=\"nx\"\u003etimeStyle\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;none\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e13\u003c/span\u003e        \u003cspan class=\"nx\"\u003edateStyle\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;full\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e14\u003c/span\u003e        \u003cspan class=\"nx\"\u003erelativeDateFormatting\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e15\u003c/span\u003e      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e16\u003c/span\u003e    \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e17\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e18\u003c/span\u003e      \u003cspan class=\"nx\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003edateString\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e19\u003c/span\u003e      \u003cspan class=\"nx\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eshortlogDir\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efileName\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e20\u003c/span\u003e      \u003cspan class=\"cm\"\u003e/* Use the ISO string as LaunchBar rejects returned objects\n\u003c/span\u003e\u003cspan class=\"ln\"\u003e21\u003c/span\u003e\u003cspan class=\"cm\"\u003e         containing types other than strings, numbers, arrays\n\u003c/span\u003e\u003cspan class=\"ln\"\u003e22\u003c/span\u003e\u003cspan class=\"cm\"\u003e         and objects (dictionaries) */\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e23\u003c/span\u003e      \u003cspan class=\"nx\"\u003edate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eisoString\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e24\u003c/span\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e25\u003c/span\u003e  \u003cspan class=\"p\"\u003e}).\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e26\u003c/span\u003e    \u003cspan class=\"cm\"\u003e/* Note this is a string comparison, but it’s OK as\n\u003c/span\u003e\u003cspan class=\"ln\"\u003e27\u003c/span\u003e\u003cspan class=\"cm\"\u003e       we’re comparing ISO date strings. */\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e28\u003c/span\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003edate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003edate\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e29\u003c/span\u003e  \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"ln\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is just a “default script”, and while \u003ccode\u003erun\u003c/code\u003e takes an argument, it’s ignored.\u003c/p\u003e\n\u003cp\u003eWe treat this as a simple pipeline of transformations on data:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ereading the contents of a directory (lines 3 \u0026amp; 4)\u003c/li\u003e\n\u003cli\u003ekeeping only those whose filenames match dated shortlog files (lines 5 \u0026amp; 6)\u003c/li\u003e\n\u003cli\u003ecreating an object containing a human-readable date, the path to the file, and an ISO-format date string (lines 7–24)\u003c/li\u003e\n\u003cli\u003esorting those objects on the ISO date string, newest to oldest (lines 25–29).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn line 3, we make use of the \u003ccode\u003eFile\u003c/code\u003e object, which is provided by LaunchBar. And in lines 9–12 we use the \u003ccode\u003eformatDate\u003c/code\u003e function on the \u003ccode\u003eLaunchBar\u003c/code\u003e object, which gives us access to the system’s date formatting, which is both locale-aware and respects the user’s date \u0026amp; time preferences.\u003c/p\u003e\n\u003cfigure class=\"pull-right\"\u003e\u003ca href=\"shortlogs-action-result.png\"\u003e\n    \u003cimg src=\"shortlogs-action-result.png\"\n         alt=\"A screenshot showing the resulting list of files in reverse date order in LaunchBar\" width=\"310\" height=\"459\"/\u003e \u003c/a\u003e\n\u003c/figure\u003e\n\u003cp\u003eBy providing the path in the result object, LaunchBar treats each entry in the list as a file, so you can press return to open it, or press the right arrow to inspect its details.\u003c/p\u003e\n\u003cp\u003eOne oddity: I did try to store a JavaScript \u003ccode\u003eDate\u003c/code\u003e in the result objects, to use in the final sorting, but LaunchBar displays an error if a \u003ccode\u003eDate\u003c/code\u003e in the returned items. You could strip out any of your custom properties, but here I just use the ISO-format date string from the filename as it works just as well for the sorting comparison.\u003c/p\u003e\n\u003cp\u003e(Another oddity: I initially created the \u003ccode\u003eDate\u003c/code\u003e (now in line 10) manually with the date components extracted from the ISO-format date string. I learned that the constructor doesn’t take a \u003ccode\u003emonth\u003c/code\u003e argument but instead a \u003ccode\u003emonthIndex\u003c/code\u003e, in the range 0–11. \u003ca href=\"https://stackoverflow.com/questions/2552483/why-does-the-month-argument-range-from-0-to-11-in-javascripts-date-constructor\"\u003eSome background on why this is\u003c/a\u003e.)\u003c/p\u003e\n"},{"id":"https://www.robjwells.com/2020/04/macos-transpose-shortcut-in-firefox/","url":"https://www.robjwells.com/2020/04/macos-transpose-shortcut-in-firefox/","title":"macOS transpose shortcut in Firefox","date_published":"2020-04-18T06:00:00+01:00","content_html":"\u003cp\u003emacOS has a built-in shortcut to transpose characters, ⌃T, which is really handy. Sadly, Firefox doesn’t support it. This has been the case for at least the past seven years, as I remember telling a colleague at my previous job about useful macOS shortcuts, only for him to immediately try and find it “didn’t work.”\u003c/p\u003e\n\u003cp\u003eFirefox is my main browser at the moment (because of \u003ca href=\"https://github.com/el1t/uBlock-Safari/issues/158\"\u003ethe changes to content-blocking in Safari\u003c/a\u003e), so this has become a bit of an irritation.\u003c/p\u003e\n\u003cp\u003eHere’s a Keyboard Maestro macro to poorly replicate ⌃T in Firefox:\u003c/p\u003e\n\u003cfigure\u003e\u003ca href=\"transpose-macro.kmmacros\"\u003e\n    \u003cimg src=\"transpose-macro.png\"\n         alt=\"A screenshot of a Keyboard Maestro macro to transpose characters in Firefox on macOS.\" width=\"473\" height=\"471\"/\u003e \u003c/a\u003e\n\u003c/figure\u003e\n\u003cp\u003e“Poorly” because it’s slower than ⌃T usually is in supporting applications, and it makes no attempt to clean up your clipboard history.\u003c/p\u003e\n\u003cp\u003eIf you’re interested, you’d probably want to implement some clipboard-repair, but I use LaunchBar’s clipboard history and I can’t find a way of using the \u003ca href=\"https://wiki.keyboardmaestro.com/action/Delete_Past_Clipboard\"\u003eDelete Past Clipboard\u003c/a\u003e action in a way that doesn’t put additional unwanted items into my clipboard history. Keyboard Maestro has its own clipboard history manager, so if you’re using that (or not using one at all) then you should be well served by Delete Past Clipboard.\u003c/p\u003e\n"},{"id":"https://www.robjwells.com/2020/04/shortlogging/","url":"https://www.robjwells.com/2020/04/shortlogging/","title":"Shortlogging","date_published":"2020-04-11T10:47:05+01:00","content_html":"\u003cp\u003eBack in 2018, I was trying to think of a way where I could record work or personal activities, and what I came up with was to create a daily log file for my life, like you might have from a program with \u003ccode\u003elogger.setLevel(INFO)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eI set up a \u003ca href=\"https://getdrafts.com/\"\u003eDrafts\u003c/a\u003e action on my phone, and stuck with it for a couple of months. But there was always a certain amount of friction, more so after I changed jobs to one where I use a fairly locked-down Windows PC for most of the day.\u003c/p\u003e\n\u003cp\u003eIn 2018 I stuck with it for a few months. Now, with the current coronavirus lockdown in Britain, I’m working from home and thought it might be a good idea to revive it. But I had to resolve the problem that caused me to stop in the first place: friction.\u003c/p\u003e\n\u003cp\u003eI use \u003ca href=\"https://www.beeminder.com\"\u003eBeeminder\u003c/a\u003e and knew they had something along these lines, called \u003ca href=\"https://github.com/tagtime/TagTime\"\u003eTagTime\u003c/a\u003e. But it’s not quite what I was after — it’s more of a time-tracking approach, for which I use \u003ca href=\"https://www.rescuetime.com/\"\u003eRescueTime\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eRescueTime itself has a \u003ca href=\"https://blog.rescuetime.com/highlights/\"\u003ehighlights feature\u003c/a\u003e, which is philosophically what I want — record the meaningful things that you did to complement time-tracking — but recording the highlights has the same problem. I actually came to resent RescueTime a bit as I had an alert set (I think it’s one of the suggested ones) that prompts you to enter highlights after a certain amount of “productive” time. The problem was, this alert would activate my web browser and open a new tab on the highlights page, typically while I was in the middle of working on something!\u003c/p\u003e\n\u003cp\u003eBrett Terpstra has a tool called \u003ca href=\"https://github.com/ttscoff/doing\"\u003edoing\u003c/a\u003e, which now that I look at it behaves how I want (recording activities as complete) but it’s very featureful and a bit much for me.\u003c/p\u003e\n\u003cp\u003eSo, obviously, I decided to roll my own.\u003c/p\u003e\n\u003cp\u003eThe core of my setup is a folder which I keep at \u003ccode\u003e~/Dropbox/notes/shortlog/\u003c/code\u003e, in which reside files like \u003ccode\u003eshortlog-2020-04-09.txt\u003c/code\u003e. The contents of these files looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e2020-04-09 09:46:36 | Read Kirk Baker’s SVD notes (…)\n2020-04-09 10:00:15 | Set up Python environment for NLP coursework 2 (…)\n2020-04-09 11:30:07 | Had CND Team Meeting\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI created a \u003ca href=\"https://www.keyboardmaestro.com/main/\"\u003eKeyboard Maestro\u003c/a\u003e macro to make logging easy (\u003ca href=\"shortlog-prompt.kmmacros\"\u003eclick to download\u003c/a\u003e):\u003c/p\u003e\n\u003cfigure class=\"full-width\"\u003e\u003ca href=\"shortlog-prompt.kmmacros\"\u003e\n    \u003cimg src=\"shortlog-prompt-kmmacro.png\"\n         alt=\"A screenshot showing the Keyboard Maestro macro I use to enter shortlog entries.\"/\u003e \u003c/a\u003e\n\u003c/figure\u003e\n\u003cp\u003eWhen you invoke the macro, you get a pop-up dialog like this:\u003c/p\u003e\n\u003cfigure\u003e\n    \u003cimg src=\"shortlog-prompt.png\"\n         alt=\"A screenshot of the shortlog pop-up window prompting for an entry, with a text entry field and buttons labelled “More”, “Cancel” and “Done”.\"/\u003e \n\u003c/figure\u003e\n\u003cp\u003e“More” lets you log more than one entry. For convenience, if the entry field is empty and you choose “Done”, it exits without logging anything.\u003c/p\u003e\n\u003cp\u003eThese entries get prepended with the date and then appended to a file named after the current date.\u003c/p\u003e\n\u003cp\u003eTagTime randomly polls you at an interval drawn from a Poisson distribution. I didn’t want to get into the weeds on that, so I took their average poll time (45 minutes) and set up another macro to invoke the shortlog entry macro that often during my normal waking hours. This can be a bit annoying if you’re focussed on a particular task, in a similar way to the RescueTime highlight prompt, so I found it useful to create a macro that toggles the automatic prompting (which I invoke through Keyboard Maestro’s find-by-name palette as it doesn’t need its own shortcut).\u003c/p\u003e\n\u003cp\u003eOn my iPhone, I’ve kept the Drafts action (\u003ca href=\"https://actions.getdrafts.com/a/17R\"\u003ewhich is available online\u003c/a\u003e). It’s just a single Dropbox step, with the following attributes:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eAttribute\u003c/th\u003e\n\u003cth\u003eValue\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003efileNameTemplate\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eshortlog-[[date\\|%Y-%m-%d]].txt\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003efolderTemplate\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e/notes/shortlog/\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003etemplate\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003e[[date\\|%Y-%m-%d %H:%M:%S]] \\| [[draft]]\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cem\u003ewriteType\u003c/em\u003e\u003c/td\u003e\n\u003ctd\u003e\u003ccode\u003eappend\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eDrafts writes a newline before the content defined in \u003cem\u003etemplate\u003c/em\u003e, which I can’t seem to disable. (Advice greatly appreciated.) I’ve got a simple \u003ccode\u003esed\u003c/code\u003e command I run occasionally to remove the blank lines if it’s bugging me.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-zsh\" data-lang=\"zsh\"\u003esed -i \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e -e \u003cspan class=\"s1\"\u003e\u0026#39;/^\\s*$/d\u0026#39;\u003c/span\u003e\n    \u003cspan class=\"s2\"\u003e\u0026#34;/Users/\u003c/span\u003e\u003cspan class=\"nv\"\u003e$USER\u003c/span\u003e\u003cspan class=\"s2\"\u003e/Dropbox/notes/shortlog/shortlog-\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003edate +%Y-%m-%d\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e.txt\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLastly, I also wanted these shortlog entries available as RescueTime highlights, as it allows you to review your tracked time with your manual “annotations” alongside. I wrote a fairly short Python script to do this (\u003ca href=\"https://github.com/robjwells/shortlog_to_rescuetime_highlights\"\u003erepo\u003c/a\u003e, \u003ca href=\"https://github.com/robjwells/shortlog_to_rescuetime_highlights/blob/master/shortlog_to_rescuetime.py\"\u003escript itself\u003c/a\u003e), which runs each morning and logs the previous days’s entries as highlights by POSTing them to the RescueTime API. It’s nuts-and-bolts so I won’t review the code here.\u003c/p\u003e\n\u003cp\u003eThe one thing that I do want to note is that I have a job set up in \u003ca href=\"https://www.peterborgapps.com/lingon/\"\u003eLingon\u003c/a\u003e (a friendly interface to \u003ccode\u003elaunchd\u003c/code\u003e) to do this each day, and that \u003ccode\u003elaunchd\u003c/code\u003e will run jobs missed while asleep (though not those missed if the computer is powered off) at the next opportunity:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUnlike \u003ccode\u003ecron\u003c/code\u003e which skips job invocations when the computer is asleep, \u003ccode\u003elaunchd\u003c/code\u003e will start the job the next time the computer wakes up. If multiple intervals transpire before the computer is woken, those events will be coalesced into one event upon wake from sleep.\n(From \u003ccode\u003eman launchd.plist\u003c/code\u003e)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI don’t believe that you can achieve this with Keyboard Maestro, as the \u003ca href=\"https://wiki.keyboardmaestro.com/trigger/Time_of_Day\"\u003ewiki page for the time of day trigger\u003c/a\u003e contains this warning:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRemember that the Mac must be awake for the trigger to happen, and if the Mac is sleeping the macro will not fire at a later time.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eBut I’d be very happy to be corrected if there’s a way to achieve the \u003ccode\u003elaunchd\u003c/code\u003e behaviour through Keyboard Maestro.\u003c/p\u003e\n"},{"id":"https://www.robjwells.com/2020/03/permanent/","url":"https://www.robjwells.com/2020/03/permanent/","title":"Permanent","date_published":"2020-03-29T13:39:14+01:00","content_html":"\u003cp\u003eOver the past couple of days I’ve cleared through my Pinboard bookmarks, getting my “unread” count down from a ludicrous 1,000 or so to just six as of right now, and tagging or deleting the 200-odd untagged bookmarks.\u003c/p\u003e\n\u003cp\u003eI ran the “find dead bookmarks” command in \u003ca href=\"https://bananafishsoftware.com/products/spillo/\"\u003eSpillo\u003c/a\u003e this morning and got about 100.\nSome of those are entire sites going offline, including ones active fairly recently, one deleted despite posting a searing set of essays last May.\nOne is a site that I knew had stopped publishing, after several years of great articles and interviews, but has now vanished from the web.\n(Thankfully I still have a cached copy; Pinboard’s archiving feature is absolutely worth paying for.)\u003c/p\u003e\n\u003cp\u003eOne site, of an economics thinktank, fairly recently redesigned its site and its URL structure.\nIt would have been a simple job to redirect the URLS, as the page portion of the URL remained the same, but instead they were left broken.\u003c/p\u003e\n\u003cp\u003eIt was an interesting experience, rediscovering some interesting links from my 10 years of bookmarking (of varying intensity over that period).\nIt was interesting also to see who was still around and who had gone, and who had decided to delete parts of their output.\u003c/p\u003e\n\u003cp\u003eWhen I moved this site off Tumblr in autumn 2015, and made it static, I redirected the URLs of the 50 posts I wanted to keep (since I don’t write much, this is about 50% of the current total; I didn’t republish some that I was particularly embarrassed by or were at that point entirely out of date and irrelevant).\nThis couldn\u0026rsquo;t be done algorithmically, as I had to map an opaque number to a more traditional date-title URL, rather than just chopping out or rewriting part of the URL.\nIt surprises me that people who otherwise take care over their website don’t do this.\n(After all, \u003ca href=\"https://www.w3.org/Provider/Style/URI\"\u003eCool URIs don’t change\u003c/a\u003e.)\u003c/p\u003e\n\u003cp\u003eAnd for those that have gone away, they’d put real time and effort into that writing, and now it’s entirely gone, except for wherever it’s cached online.\nObviously people have reasons for pulling articles from the web, beyond simply not caring anymore.\nBut for those that have simply stopped… does that work need to come down?\nI switched this site over to Hugo recently, which wasn’t a huge job (sorry if you saw items repeat in the RSS feed).\nStill a technical task, true, but we’re at a point now where creating a static version of a site that you can just throw up somewhere like S3 or GitHub is well within the capabilities of someone who’s already bought a domain and set up Wordpress with a custom theme.\u003c/p\u003e\n\u003cp\u003eIt’s just sad to see people’s hard work vanish like this.\u003c/p\u003e\n"}]}